[{"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\index.js":"1","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\reportWebVitals.js":"2","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\App.js":"3","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\contexts\\ThemeContexts.js":"4","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\contexts\\UserContexts.js":"5","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\contexts\\SaleContexts.js":"6","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\pages\\Home\\Home.js":"7","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\pages\\ProductInfo\\ProductInfo.js":"8","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\pages\\Admin\\Admin.js":"9","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\ChangeThemeColors\\ChangeThemeColors.js":"10","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\pages\\About\\About.js":"11","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\DisplayUser\\DisplayUser.js":"12","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\storagetools\\LocalStorageArrayTools.js":"13","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\Products\\Products.js":"14","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\Header\\Header.js":"15","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\CategorySelectAdmin\\CategorySelectAdmin.js":"16","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\CartIcon\\CartIcon.js":"17","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\ChangeUser\\ChangeUser.js":"18","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\SearchKeyword\\SearchKeyword.js":"19","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\SaleCountdown\\SaleCountdown.js":"20","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\CategorySelect\\CategorySelect.js":"21","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\ProductDisplayClass\\ProductDisplayClass.js":"22","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\SliderFilterPrice\\SliderFilterPrice.js":"23","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\ListCategories\\ListCategories.js":"24","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\CartDisplayContents\\CartDisplayContents.js":"25","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\CartItem\\CartItem.js":"26"},{"size":517,"mtime":1619161537280,"results":"27","hashOfConfig":"28"},{"size":375,"mtime":1619161537288,"results":"29","hashOfConfig":"28"},{"size":4257,"mtime":1620850667726,"results":"30","hashOfConfig":"28"},{"size":634,"mtime":1619449157195,"results":"31","hashOfConfig":"28"},{"size":339,"mtime":1619161537278,"results":"32","hashOfConfig":"28"},{"size":688,"mtime":1619161537277,"results":"33","hashOfConfig":"28"},{"size":2588,"mtime":1620850100070,"results":"34","hashOfConfig":"28"},{"size":21626,"mtime":1620836012851,"results":"35","hashOfConfig":"28"},{"size":8144,"mtime":1619161537284,"results":"36","hashOfConfig":"28"},{"size":628,"mtime":1619761154939,"results":"37","hashOfConfig":"28"},{"size":293,"mtime":1619161537282,"results":"38","hashOfConfig":"28"},{"size":551,"mtime":1619161537251,"results":"39","hashOfConfig":"28"},{"size":1112,"mtime":1619161537275,"results":"40","hashOfConfig":"28"},{"size":3021,"mtime":1619761154946,"results":"41","hashOfConfig":"28"},{"size":3022,"mtime":1620748559469,"results":"42","hashOfConfig":"28"},{"size":1763,"mtime":1619161537246,"results":"43","hashOfConfig":"28"},{"size":2780,"mtime":1619761154933,"results":"44","hashOfConfig":"28"},{"size":714,"mtime":1619450058587,"results":"45","hashOfConfig":"28"},{"size":1714,"mtime":1619761154950,"results":"46","hashOfConfig":"28"},{"size":3658,"mtime":1619161537260,"results":"47","hashOfConfig":"28"},{"size":1462,"mtime":1619761154937,"results":"48","hashOfConfig":"28"},{"size":3369,"mtime":1619761154944,"results":"49","hashOfConfig":"28"},{"size":2814,"mtime":1619761154953,"results":"50","hashOfConfig":"28"},{"size":1434,"mtime":1619761154942,"results":"51","hashOfConfig":"28"},{"size":1747,"mtime":1619449187431,"results":"52","hashOfConfig":"28"},{"size":8096,"mtime":1619452705471,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"4yp0k4",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"56"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"56"},"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\index.js",[],["120","121"],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\reportWebVitals.js",[],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\App.js",["122","123"],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\contexts\\ThemeContexts.js",[],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\contexts\\UserContexts.js",[],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\contexts\\SaleContexts.js",["124"],"import { createContext } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nconst sales = {\r\n  endOfYearSale: {\r\n    isSale: \"true\",\r\n    percentOff: 20,\r\n    dateEnd: \"2021-10-25\",\r\n    name: \"End of Year Sale\",\r\n    color: \"#002200\",\r\n  },\r\n  noSale: {\r\n    isSale: \"false\",\r\n    percentOff: 0,\r\n    dateEnd: \"2015-03-25\",\r\n    name: \"No special offers\",\r\n    color: \"#002200\",\r\n  },\r\n  summerSale: {\r\n    isSale: \"true\",\r\n    percentOff: 10,\r\n    dateEnd: \"2020-08-31\",\r\n    name: \"Summer Sale\",\r\n    color: \"#002200\",\r\n  },\r\n};\r\n\r\nlet currentSale = sales.endOfYearSale;\r\nconst SaleContext = createContext(null);\r\nexport { sales, currentSale };\r\nexport default SaleContext;\r\n","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\pages\\Home\\Home.js",["125","126","127","128","129","130","131","132"],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\pages\\ProductInfo\\ProductInfo.js",["133","134","135","136","137","138","139","140","141"],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\pages\\Admin\\Admin.js",["142","143","144","145","146","147","148","149","150","151"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport \"./Admin.css\";\r\n\r\n//components of content:\r\nimport Header from \"../../components/Header/Header\";\r\nimport Products from \"../../components/Products/Products\";\r\n//import SearchKeyword from \"../SearchKeyword/SearchKeyword\";\r\nimport CategorySelectAdmin from \"../../components/CategorySelectAdmin/CategorySelectAdmin\";\r\nimport ThemeContext from \"../../contexts/ThemeContexts\";\r\nimport SaleContext, { sales } from \"../../contexts/SaleContexts\";\r\n\r\n/*****\r\n * NEED TO ADD NEW FIELDS TO FORM\r\n * *******\r\n */\r\n\r\nconst Admin = () => {\r\n  const [color] = useState(\"red\");\r\n  const [secondsLeft, setSecondsLeft] = useState(65);\r\n  const [salesProductsIds] = useState([1, 3, 5, 6]);\r\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\r\n  const [products, setProducts] = useState([]);\r\n  const [onSale, setSale] = useState(false);\r\n  const [saleReductionPercent, setReduction] = useState(10);\r\n  const [productName, setName] = useState(\"\");\r\n  const [productDescription, setDescription] = useState(\"\");\r\n  const [productURL, setURL] = useState(\"\");\r\n  const [productPrice, setPrice] = useState(\"\");\r\n  const [quantityInStock, setStockQuantity] = useState(\"\");\r\n  const [notAllFieldsFilled, setFieldsFilled] = useState(false);\r\n\r\n  const { theme } = useContext(ThemeContext);\r\n  const { sale } = useContext(SaleContext);\r\n\r\n  console.log(\"theme\", theme, \"on sale?\", onSale);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/api/products\")\r\n      .then((result) => result.json())\r\n      .then((data) => {\r\n        setProducts(data);\r\n      });\r\n    console.log(\"fetched \");\r\n  }, []);\r\n\r\n  const addButtonLabelStyle = {\r\n    display: \"block\",\r\n  };\r\n\r\n  const checkFieldsFilled = (\r\n    title,\r\n    description,\r\n    price,\r\n    category,\r\n    image,\r\n    quantityInStock,\r\n    onSale\r\n  ) => {\r\n    if (\r\n      title.length === 0 ||\r\n      description.length === 0 ||\r\n      price.length === 0 ||\r\n      category.length === 0 ||\r\n      image.length === 0 ||\r\n      quantityInStock.length === 0\r\n    ) {\r\n      setFieldsFilled(true);\r\n    } else {\r\n      setFieldsFilled(false);\r\n    }\r\n  };\r\n\r\n  const addProduct = async (\r\n    title,\r\n    description,\r\n    price,\r\n    category,\r\n    image,\r\n    quantityInStock,\r\n    onSale,\r\n    saleReductionPercent\r\n  ) => {\r\n    //alert(\"adding\");\r\n    console.log(\"in add product in client\");\r\n    // check here if all fields have been filled in:\r\n    //alert(\"checking fields\");\r\n    if (\r\n      title.length === 0 ||\r\n      description.length === 0 ||\r\n      price.length === 0 ||\r\n      category.length === 0 ||\r\n      image.length === 0 ||\r\n      quantityInStock.length === 0\r\n    ) {\r\n      //alert(\"not all filled\");\r\n      setFieldsFilled(true);\r\n    } else {\r\n      //alert(\"all filled\");\r\n      setFieldsFilled(false);\r\n      // upload new product to server\r\n      const res = await fetch(\"/api/products\", {\r\n        method: \"POST\", // or 'PUT'\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          title: title,\r\n          description,\r\n          price,\r\n          category,\r\n          image,\r\n          quantityInStock,\r\n          onSale,\r\n          saleReductionPercent,\r\n        }),\r\n      });\r\n      //alert(\"res is \", res);\r\n      const product = await res.json();\r\n      //alert(\"adding product \", product);\r\n      console.log(\"adding product \", product);\r\n\r\n      setProducts([products, ...products]);\r\n\r\n      // clear Add Product form\r\n      setName(\"\");\r\n      setSelectedCategory(\"\");\r\n      setDescription(\"\");\r\n      setURL(\"\");\r\n      setPrice(\"\");\r\n      setStockQuantity(\"\");\r\n      setSale(false);\r\n      setReduction(10);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ background: theme.background }}>\r\n      <div>Input name of product:</div>\r\n      <input\r\n        id=\"productName\"\r\n        value={productName}\r\n        onChange={(e) => setName(e.target.value)}\r\n        //onChange={setName(e.target.value)}\r\n        style={{ color: theme.background, background: theme.foreground }}\r\n      />\r\n      {productName.length === 0 && notAllFieldsFilled && (\r\n        <label for=\"productName\">Enter name of product</label>\r\n      )}\r\n      <div>Input description of product:</div>\r\n      <input\r\n        id=\"productDescription\"\r\n        value={productDescription}\r\n        onChange={(e) => setDescription(e.target.value)}\r\n        style={{ color: theme.background, background: theme.foreground }}\r\n      />\r\n      {productDescription.length === 0 && notAllFieldsFilled && (\r\n        <label for=\"productDescription\">Enter description of product</label>\r\n      )}\r\n      <div>Input image URL of product:</div>\r\n      <input\r\n        id=\"productURL\"\r\n        value={productURL}\r\n        onChange={(e) => setURL(e.target.value)}\r\n        style={{ color: theme.background, background: theme.foreground }}\r\n      />\r\n      {productURL.length === 0 && notAllFieldsFilled && (\r\n        <label for=\"productURL\">Enter url of picture of product</label>\r\n      )}\r\n      {productURL.length !== 0 && (\r\n        <div>\r\n          <img\r\n            className=\"thumbImg\"\r\n            src={productURL}\r\n            alt={{ productName }}\r\n          ></img>\r\n        </div>\r\n      )}\r\n      <div>Input price of new product:</div>\r\n      <input\r\n        id=\"productPrice\"\r\n        value={productPrice}\r\n        onChange={(e) => setPrice(e.target.value)}\r\n        style={{ color: theme.background, background: theme.foreground }}\r\n      />\r\n      {productPrice.length === 0 && notAllFieldsFilled && (\r\n        <label for=\"productPrice\">Enter price of product</label>\r\n      )}\r\n      {products.length > 0 && (\r\n        <CategorySelectAdmin\r\n          selectedCategory={selectedCategory}\r\n          setSelectedCategory={setSelectedCategory}\r\n          products={products}\r\n        ></CategorySelectAdmin>\r\n      )}\r\n      <div>Number of product in stock:</div>\r\n      <input\r\n        id=\"quantityInStock\"\r\n        value={quantityInStock}\r\n        onChange={(e) => setStockQuantity(e.target.value)}\r\n        style={{ color: theme.background, background: theme.foreground }}\r\n      />\r\n\r\n      {quantityInStock.length === 0 && notAllFieldsFilled && (\r\n        <label for=\"quantityInStock\">How many of product are in stock?</label>\r\n      )}\r\n      <button\r\n        style={{ color: theme.background, background: theme.foreground }}\r\n        onClick={(e) => {\r\n          alert(\"on slae?\", onSale);\r\n          setSale(!onSale);\r\n        }}\r\n      >\r\n        on slae?\r\n      </button>\r\n      <div>Put item on sale:</div>\r\n      <input\r\n        id=\"setSale\"\r\n        type=\"checkbox\"\r\n        value={onSale}\r\n        onChange={(e) => setSale(!onSale)}\r\n        style={{ color: theme.background, background: theme.foreground }}\r\n      />\r\n      {onSale && (\r\n        <div>\r\n          <div>Percentage price reduction: </div>\r\n          <input\r\n            id=\"reductionInput\"\r\n            value={saleReductionPercent}\r\n            onChange={(e) => {\r\n              setReduction(e.target.value);\r\n            }}\r\n            style={{ color: theme.background, background: theme.foreground }}\r\n          ></input>\r\n        </div>\r\n      )}\r\n      <button\r\n        id=\"addNewProductButton\"\r\n        style={{ background: theme.background, color: theme.foreground }}\r\n        onClick={(e) =>\r\n          addProduct(\r\n            productName,\r\n            productDescription,\r\n            productPrice,\r\n            selectedCategory,\r\n            productURL,\r\n            quantityInStock,\r\n            onSale,\r\n            saleReductionPercent\r\n          )\r\n        }\r\n      >\r\n        Add new product\r\n      </button>\r\n      {notAllFieldsFilled && (\r\n        <label for=\"addNewProductButton\" style={{ display: \"block\" }}>\r\n          Complete all fields before uploading new product.\r\n        </label>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Admin;\r\n\r\n/*\r\naddProduct(\r\n            productName,\r\n            productDescription,\r\n            productPrice,\r\n            selectedCategory,\r\n            productURL,\r\n            quantityInStock,\r\n            onSale\r\n          )\r\n          */\r\n","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\ChangeThemeColors\\ChangeThemeColors.js",[],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\pages\\About\\About.js",[],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\DisplayUser\\DisplayUser.js",["152","153","154","155","156"],"import React, { useContext, useState, useEffect } from \"react\";\r\nimport UserContext from \"../../contexts/UserContexts\";\r\nimport ThemeContext from \"../../contexts/ThemeContexts\";\r\nimport ChangeUser from \"../ChangeUser/ChangeUser\";\r\n\r\nconst DisplayUser = () => {\r\n  const { user, toggleUser } = useContext(UserContext);\r\n  const { theme, toggleTheme } = useContext(ThemeContext);\r\n\r\n  return (\r\n    <div style={{ paddingBottom: \"20px\" }}>\r\n      <div>Welcome {user.name}</div>\r\n      <ChangeUser />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayUser;\r\n","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\storagetools\\LocalStorageArrayTools.js",[],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\Products\\Products.js",["157","158","159","160"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport ProductDisplayClass from \"../ProductDisplayClass/ProductDisplayClass\";\r\nimport \"./Products.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport UserContext from \"../../contexts/UserContexts\";\r\n\r\nconst Products = (props) => {\r\n  const { secondsLeft, selectedCategory, products, isSale, priceRange, searchKeyword } = props;\r\n  const { user, toggleUser } = useContext(UserContext);\r\n  const [filteredData, setFilteredData]= useState(products);\r\n    \r\n  useEffect(() => {\r\n\r\n    let tempProds1, tempProds2;\r\n    \r\n    tempProds1 = products.filter( (item) => ( item.price <= priceRange[1] && item.price >= priceRange[0]));\r\n    tempProds2 = (selectedCategory != \"\") ? tempProds1.filter( (item) => ( item.category === selectedCategory)) : tempProds1;\r\n    tempProds1 = (searchKeyword != \"\") ? tempProds2.filter( (item) => ( item.category.includes(searchKeyword) || item.description.includes(searchKeyword) || item.title.includes(searchKeyword))) : tempProds2;\r\n    setFilteredData(tempProds1);\r\n\r\n  }, [priceRange, selectedCategory, searchKeyword]);\r\n\r\n  // maps the array containing the shop information to set up individual products items\r\n  // and passes via to the ProductsDisplayClass which will starts the sale countdown and which calls the  */\r\n\r\n  return (\r\n    <div>\r\n           {user.name === \"Admin\" && <div>Click on product to edit it</div>}\r\n      {user.name !== \"Admin\" && (\r\n        <div>Click on product to see details and order</div>\r\n      )}\r\n      {filteredData.length > 0 && (\r\n        <div className=\"product-filter\">\r\n          {filteredData.map((product) => (\r\n            <Link\r\n              className=\"product-card  hvr-shutter-out-vertical\"\r\n              to={`/products/${product._id}`}\r\n              key={product._id}\r\n            >\r\n              <ProductDisplayClass\r\n                secondsLeft={secondsLeft}\r\n                selectedCategory={selectedCategory}\r\n                title={product.title}\r\n                image={product.image}\r\n                price={product.price}\r\n                productid={product._id}\r\n                category={product.category}\r\n                onSale={product.onSale}\r\n                saleReductionPercent={product.saleReductionPercent}\r\n                isSale={isSale}\r\n                quantityInStock={product.quantityInStock}\r\n                priceRange={priceRange}\r\n                key={product._id}\r\n              ></ProductDisplayClass>\r\n            </Link>\r\n          ))}\r\n        </div>\r\n      )}\r\n      {filteredData.length === 0 && (<div className=\"NoProdsWarning\">No products in the shop match your search</div>)}\r\n    </div>\r\n  );\r\n};\r\n\r\nProducts.propTypes = {\r\n  selectedCategory: PropTypes.string,\r\n  categories: PropTypes.arrayOf(PropTypes.string),\r\n  secondsLeft: PropTypes.number,\r\n  salesProductsIds: PropTypes.arrayOf(PropTypes.number),\r\n};\r\n\r\n/* need propTypes for products and setProducts */\r\n\r\nexport default Products;\r\n","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\Header\\Header.js",["161","162","163"],"import { React, useContext, useState } from \"react\";\r\nimport createPersistedState from \"use-persisted-state\";\r\nimport SaleCountdown from \"../SaleCountdown/SaleCountdown\";\r\nimport PropTypes from \"prop-types\";\r\nimport CategorySelect from \"../CategorySelect/CategorySelect\";\r\nimport SliderFilterPrice from \"../SliderFilterPrice/SliderFilterPrice\";\r\nimport \"./Header.css\";\r\nimport SearchKeyword from \"../SearchKeyword/SearchKeyword\";\r\nimport \"../../components/storagetools/LocalStorageArrayTools.js\";\r\nimport CartIcon from \"../CartIcon/CartIcon\";\r\nimport UserContext from \"../../contexts/UserContexts\";\r\nconst useCartState = createPersistedState(\"cart\");\r\n\r\nconst Header = (props) => {\r\n  const {\r\n    selectedCategory,\r\n    setSelectedCategory,\r\n    secondsLeft,\r\n    setSecondsLeft,\r\n    isSale,\r\n    setSale,\r\n    products,\r\n    setProducts,\r\n    priceRange,\r\n    setPriceRange,\r\n    searchKeyword,\r\n    setSearch,\r\n  } = props;\r\n\r\n  const { user, toggleUser } = useContext(UserContext);\r\n\r\n  const [cart, setCart] = useCartState({});\r\n  const [numInCart, setNumInCart] = useState((cart.length>0? cart.reduce((n, { quantity }) => n + quantity, 0): 0));\r\n\r\n  return (\r\n    <div className=\"headerDiv\">\r\n      {user.name === \"Guest\" && <CartIcon numInCart={numInCart} setNumInCart={setNumInCart}/>}\r\n      <SaleCountdown\r\n        secondsLeft={secondsLeft}\r\n        setSecondsLeft={setSecondsLeft}\r\n        isSale={isSale}\r\n        setSale={setSale}\r\n      ></SaleCountdown>\r\n      {products.length > 0 && (\r\n        <CategorySelect\r\n          selectedCategory={selectedCategory}\r\n          setSelectedCategory={setSelectedCategory}\r\n          products={products}\r\n        ></CategorySelect>\r\n      )}\r\n      {products.length > 0 && (\r\n        <SearchKeyword\r\n          searchKeyword={searchKeyword}\r\n          setSearch={setSearch}\r\n          products={products}\r\n        ></SearchKeyword>\r\n      )}\r\n      <div className=\"price-range\">\r\n        <SliderFilterPrice\r\n          priceRange={priceRange}\r\n          setPriceRange={setPriceRange}\r\n          products={products}\r\n        ></SliderFilterPrice>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  secondsLeft: PropTypes.number,\r\n  categories: PropTypes.arrayOf(PropTypes.string),\r\n  selectedCategory: PropTypes.string,\r\n  setSelectedCategory: PropTypes.func,\r\n};\r\n/* need to add proptypes of products*/\r\n\r\nexport default Header;\r\n\r\n/*      return (\r\n        <div>\r\n          <h1> App</h1>\r\n          <SaleCountdown\r\n            secondsLeft={secondsLeft}\r\n            setSecondsLeft={setSecondsLeft}\r\n            isSale={isSale}\r\n            setSale={setSale}\r\n          ></SaleCountdown>\r\n          {products.length > 0 && (\r\n            <CategorySelect\r\n              selectedCategory={selectedCategory}\r\n              setSelectedCategory={setSelectedCategory}\r\n              products={products}\r\n            ></CategorySelect>\r\n            <SliderFilterPrice priceRange={priceRange}></SliderFilterPrice}\r\n          )}\r\n        </div>\r\n      );\r\n      */\r\n","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\CategorySelectAdmin\\CategorySelectAdmin.js",[],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\CartIcon\\CartIcon.js",["164","165","166"],"import { React, useState, useEffect, useReducer } from \"react\";\r\n\r\n// installed custom hook use-persisted-state from https://github.com/donavon/use-persisted-state\r\n// to keep localStorage in state for automatic render update of\r\n// cart values from localStorage\r\nimport createPersistedState from \"use-persisted-state\";\r\n\r\nimport cartIcon from \"../../components/icons/shoppingCart.png\";\r\nimport \"../../components/storagetools/LocalStorageArrayTools.js\";\r\nimport \"./CartIcon.css\";\r\nimport CartDisplayContents from \"../CartDisplayContents/CartDisplayContents\";\r\n\r\nconst useCartState = createPersistedState(\"cart\");\r\n\r\nconst CartIcon = ({numInCart, setNumInCart}) => {\r\nconst [cart, setCart] = useCartState({});\r\n\r\nconst [ShowCart, setShowCart] = useState(false);\r\n\r\n  // old version using useState / useReducer / useEffect -\r\n  // cart data doesn't re-render automatically on change\r\n  //const [cartNumItems, setNumItems] = useState(0);\r\n  // const [cartNumItems, setCartNumItems] = useReducer((prev, cur) => {\r\n  //   localStorage.setItem(\"cartQty\", JSON.stringify(cur));\r\n  //   return cur;\r\n  // }, JSON.parse(localStorage.getItem(\"cartQty\")));\r\n\r\n  /*  const [cartNumItems, setCartNumItems] = useReducer((prev, cur) => {\r\n    localStorage.getItem(\"cartQty\", JSON.stringify(cur));\r\n    return cur;\r\n    //localStorage.getItem(\"cartArray\", JSON.stringify(cur));\r\n    //return cur.length;\r\n  }, JSON.parse(localStorage.getItem(\"cartArray\")));*/\r\n\r\n  // see google on \"localstorage dependency in useeffect\"\r\n  // useEffect(() => {\r\n  //   setCartNumItems(localStorage.getItem(\"cartQty\"));\r\n  // }, localStorage);\r\n\r\n\r\n  const showCartFn = () => {\r\n   // showCart = !showCart;\r\n   setShowCart(!ShowCart);\r\n  };\r\n\r\n  return (\r\n    <div className=\"cartWindow\">\r\n      <div className=\"cartContainer hvr-skew-forward\">\r\n        <img\r\n          className=\"cartIcon \"\r\n          src={cartIcon}\r\n          alt=\"Shopping cart icon\"\r\n          onClick={(e) => {\r\n            showCartFn();\r\n          }}\r\n          title=\"click here to display or hide cart list\"\r\n        />\r\n        {cart.length > 0 && (\r\n          <div>\r\n            <div className=\"numCartItemsDisplay\">\r\n              {cart.reduce((n, { quantity }) => n + quantity, 0)}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n      {cart.length > 0 && ShowCart && <CartDisplayContents numInCart={numInCart} setNumInCart={setNumInCart}/>}\r\n    </div>\r\n  );\r\n};\r\nexport default CartIcon;\r\n\r\n/*onClick={(e) => {\r\n            setShowCart(true);\r\n          }}*/\r\n/* onClick={alert} */\r\n\r\n// old code to access localstorage, before installing the use-persisted-state\r\n/* <div>\r\n            <div className=\"numCartItemsDisplay\">\r\n              {localStorage.getItem(\"cartQty\")}\r\n            </div>\r\n          </div> */\r\n","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\ChangeUser\\ChangeUser.js",["167"],"import React, { useContext } from \"react\";\r\nimport UserContext from \"../../contexts/UserContexts\";\r\nimport ThemeContext from \"../../contexts/ThemeContexts\";\r\nimport \"../ChangeThemeColors/ChangeThemeColors.css\";\r\n\r\nconst ChangeUser = () => {\r\n  const { user, toggleUser } = useContext(UserContext);\r\n  const { theme, toggleTheme } = useContext(ThemeContext);\r\n\r\n  return (\r\n    <button className=\"button\"\r\n      style={{\r\n        background: theme.background,\r\n        color: theme.foreground,\r\n      }}\r\n      onClick={toggleUser}\r\n    >\r\n      {user.name === \"Admin\" && <div>Login as Guest</div>}\r\n      {user.name === \"Guest\" && <div>Login as Admin</div>}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ChangeUser;\r\n","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\SearchKeyword\\SearchKeyword.js",[],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\SaleCountdown\\SaleCountdown.js",["168"],"import React, { useEffect, useRef, useContext } from \"react\";\r\nimport \"./SaleCountdown.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport ThemeContext from \"../../contexts/ThemeContexts\";\r\n\r\n/* this component is called by the Header component *\r\n\r\n/* counts down by seconds the time left until the end of the sale,\r\nand sets state of display message depending on whether the sale has finished */\r\n\r\nconst SaleCountdown = (props) => {\r\n  const { secondsLeft, setSecondsLeft, isSale, setSale } = props;\r\n  const { theme } = useContext(ThemeContext);\r\n\r\n  const convertToDHMS = () => {\r\n    let temp = \"\";\r\n    if (secondsLeft) {\r\n      temp = `\r\n      ${Math.floor(secondsLeft / (60 * 60 * 24))}:${Math.floor(\r\n        (secondsLeft / (60 * 60)) % 24\r\n      )}:`;\r\n      temp = `${temp}${Math.floor((secondsLeft / 60) % 60)}:${Math.floor(\r\n        secondsLeft % 60\r\n      )}`;\r\n      return temp;\r\n    }\r\n  };\r\n\r\n  /************************************ */\r\n  /* version using setTimeout.\r\n  /************************************ */\r\n  /*without the use of useRef, we could not use setInterval here, as it causes an infinite loop! \r\n  /* Each time the state of DHMSLeft is updated, useEffect sets a 1 second timeout.\r\n  At the end of the timeout, the state of the DHMSLeft and secondsLeft update, and so the useEffect runs again,\r\n  and sets another 1 second timeout.\r\n  If the secondsLeft reaches zero\r\n \r\n  useEffect(() => {\r\n    const countdown = setTimeout(() => {\r\n      if (secondsLeft) {\r\n        setSecondsLeft(secondsLeft - 1);\r\n      }\r\n    }, 1000);\r\n\r\n    return () => clearTimeout(countdown);\r\n    */\r\n\r\n  /************************************ */\r\n  /* version using setInterval - needs to use useRef.\r\n  /************************************ */\r\n  const intervalRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const countdown = setInterval(() => {\r\n      if (secondsLeft) {\r\n        setSecondsLeft(secondsLeft - 1);\r\n        console.log(\"counting down, secs:\", secondsLeft);\r\n        setSale(\"true\");\r\n      } else {\r\n        setSale(\"false\");\r\n      }\r\n    }, 1000);\r\n\r\n    //use useRef to create a mutable ref object from the setTimeout identifier (\"countdown\").\r\n    // This lets the timeout id be accessible from the whole component.\r\n    // If we stored the id in a state variable, the component would be re-rendered\r\n    // after the state update so a new interval will be created, creating an infinite loop.\r\n    intervalRef.current = countdown;\r\n\r\n    /********************** */\r\n    /* EXPLANATION:          */\r\n    /********************** */\r\n    /* the intervalRef's current value is updated if starting a new countdown, \r\n    but the intervalRef itself stays fixed in the DOM and doesn't re-render when there's a change in \r\n    state of the secondsLeft variable\r\n    This how the infinite loop is prevented.\r\n    */\r\n\r\n    // Clear timeout if the component is unmounted\r\n    return () => clearTimeout(countdown);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [secondsLeft]);\r\n  //The return will runs each time useEffect finishes the timeout except for the first time\r\n  // and clears the timeout if the component is unmounted\r\n\r\n  const saleMessage = () => {\r\n    return secondsLeft\r\n      ? `10% off!! ${convertToDHMS(\r\n          secondsLeft\r\n        )} days left until the end of the Sale`\r\n      : \"Sale over\";\r\n  };\r\n\r\n  return (\r\n    <div style={{ color: theme.foreground, background: theme.background }}>\r\n      <h2 id=\"message\">{saleMessage()} </h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nSaleCountdown.propTypes = {\r\n  secondsLeft: PropTypes.number,\r\n  setSecondsLeft: PropTypes.func,\r\n};\r\n\r\nexport default SaleCountdown;\r\n","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\CategorySelect\\CategorySelect.js",["169","170","171"],"import React, { useEffect, useContext, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ListCategories from \"../ListCategories/ListCategories\";\r\nimport ThemeContext from \"../../contexts/ThemeContexts\";\r\nimport \"./CategorySelect.css\";\r\n\r\nconst CategorySelect = (props) => {\r\n  const {\r\n    selectedCategory,\r\n    setSelectedCategory,\r\n    products,\r\n  } = props;\r\n  \r\n  const { theme } = useContext(ThemeContext);\r\n\r\n  return (\r\n    <div style={{ color: theme.color, background: theme.background,  display: \"flex\", flexDirection: \"row\", padding: \"5px\" }}>\r\n      <div>Choose category of product:</div>\r\n      {products.length > 0 && (\r\n        <>\r\n        <select\r\n          id=\"selectCat\"\r\n          value={selectedCategory}\r\n          onChange={(e) => setSelectedCategory(e.target.value)}\r\n          style={{ color: theme.background, background: theme.foreground }}\r\n        >\r\n          <option value=\"\">All products</option>\r\n          <ListCategories products={products}></ListCategories>\r\n        </select>\r\n        </>\r\n      )}\r\n      <button\r\n        onClick={(e) => setSelectedCategory(\"\")}\r\n        style={{ color: theme.background, background: theme.foreground }}\r\n      >\r\n        Clear choice\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\n// CategorySelect.propTypes = {\r\n//   selectedCategory: PropTypes.string,\r\n//   setSelectedCategory: PropTypes.func,\r\n// };\r\n\r\n/* add proptypes for products */\r\nexport default CategorySelect;\r\n","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\ProductDisplayClass\\ProductDisplayClass.js",["172","173","174","175","176"],"import React, { useContext } from \"react\";\r\nimport \"./ProductDisplayClass.css\";\r\nimport PropTypes from \"prop-types\";\r\n//import saleIcon from \"../icons/sale.png\";\r\nimport SaleContext, { sales } from \"../../contexts/SaleContexts\";\r\n//import ProductInfo from \"../../pages/ProductInfo/ProductInfo\";\r\nimport ThemeContext, { themes } from \"../../contexts/ThemeContexts\";\r\nimport LeftFrame from \"../../components/icons/green-leaves-left-frame.svg\";\r\n\r\n/* this component is called from the Products class.\r\n   It renders individual products cards (product title, image, price).\r\n   If the product is a sale item, its title and sale price are colored until the sale ends \r\n   */\r\n\r\nconst ProductDisplayClass = (props) => {\r\n  const {\r\n    secondsLeft,\r\n    selectedCategory,\r\n    title,\r\n    image,\r\n    price,\r\n    productid,\r\n    category,\r\n    onSale,\r\n    saleReductionPercent,\r\n    isSale,\r\n    quantityInStock,\r\n    priceRange,\r\n  } = props;\r\n\r\n  const { theme } = useContext(ThemeContext);\r\n  const { sale } = useContext(SaleContext);\r\n\r\n  const newPrice = onSale\r\n    ? ` Sale: $ ${+((price * (100 - saleReductionPercent)) / 100).toFixed(2)}`\r\n    : \"\";\r\n\r\n    \r\n  /* renders an individual product card, containing product information and image.\r\n  the information an image are obtained from the props which are passed from the ProductsContainerClass */\r\n\r\n  return (\r\n    (!selectedCategory || category === selectedCategory) &&\r\n    price < priceRange[1] &&\r\n    price > priceRange[0] && (\r\n      <div\r\n        className=\" hvr-shutter-out-vertical\"\r\n        style={{ color: theme.foreground, background: \"white\" }}\r\n      >\r\n        <img src={LeftFrame} alt=\"frame of green leaves\" className=\"leavesFrame\"/>\r\n        <div className=\"inner-card\">\r\n        <div className=\"product-info\">\r\n          {onSale && <div className=\"product-banner-sale\">SALE</div>}\r\n          {!onSale && <div className=\"product-banner-nosale\"></div>}\r\n          <h6\r\n            style={{\r\n              color: onSale ? theme.salePriceColor : \"black\",\r\n            }}\r\n          >\r\n            {title}\r\n          </h6>\r\n        </div>\r\n        <div className=\"product-image\">\r\n          <img src={image} alt={\"\"} />\r\n        </div>\r\n        <div className=\"product-info\">\r\n          <h5>$ {price}</h5>\r\n          <h5\r\n            style={{\r\n              color: theme.salePriceColor,\r\n              display: newPrice && secondsLeft ? \"block\" : \"none\",\r\n            }}\r\n          >\r\n            {saleReductionPercent}% off! {newPrice}\r\n          </h5>\r\n          <h5>{quantityInStock} in stock</h5>\r\n        </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nProductDisplayClass.propTypes = {\r\n  secondsLeft: PropTypes.number,\r\n  color: PropTypes.string,\r\n  price: PropTypes.number,\r\n  selectedCategory: PropTypes.string,\r\n  title: PropTypes.string,\r\n  image: PropTypes.string,\r\n  salesProductsIds: PropTypes.arrayOf(PropTypes.number),\r\n  category: PropTypes.string,\r\n  quantityInStock: PropTypes.number,\r\n  onSale: PropTypes.bool,\r\n};\r\n\r\nexport default ProductDisplayClass;\r\n\r\n/* version with sale icon:\r\n<div className=\"product-info\">\r\n          {onSale && <img src={saleIcon} alt=\"sale item\"></img>}\r\n          <h6\r\n            style={{\r\n              color: onSale ? theme.salePriceColor : \"black\",\r\n            }}\r\n          >\r\n            {title}\r\n          </h6>\r\n        </div> */\r\n","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\SliderFilterPrice\\SliderFilterPrice.js",["177","178","179"],"import React, { useEffect, useContext, useState } from \"react\";\r\n \r\nimport { Slider, InputNumber } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"./SliderFilterPrice.css\";\r\nimport ThemeContext, { currentTheme } from \"../../contexts/ThemeContexts\";\r\n\r\nconst SliderFilterPrice = (props) => {\r\n  const { priceRange, setPriceRange, products } = props;\r\n  const { theme } = useContext(ThemeContext);\r\n\r\n  \r\n\r\n  const formatter = (value) =>{\r\n    return `${value}%`;\r\n  }\r\n  useEffect(() => {\r\n  if (products.length) {\r\n        console.log(\"prods are \", products);\r\n        let max = 0;\r\n        for (let i = 0; i < products.length; i++) {\r\n          max = products[i].price > max ? products[i].price : max;\r\n          console.log(\"max: \", max);\r\n        }\r\n        setPriceRange([0, max + 5]);\r\n        console.log(\"max price is: \", max);\r\n      }\r\n    }, [products, setPriceRange]);\r\n\r\n      const storeMaxPrice = priceRange[1]; //use spread to copy over values, \r\n                                                //otherwise storeMaxPrice changes dynamically when priceRange changes\r\n\r\n  return (\r\n    <>\r\n      <div style={{ color: theme.foreground, background: theme.background }}>\r\n        Select Price range:\r\n      </div>\r\n      <Slider\r\n        range\r\n        min={0}\r\n        max={50}\r\n        value={priceRange}\r\n        onChange={setPriceRange}\r\n      />\r\n      <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\"}}>\r\n      <InputNumber\r\n            min={0}\r\n            style={{ margin: '0 16px' }}\r\n            value={priceRange[0]}\r\n            onChange={setPriceRange}\r\n          />\r\n             <button\r\n        id=\"clearButton\"\r\n        onClick={(e) => setPriceRange([1,50])}\r\n        style={{ color: theme.background, background: theme.foreground }}\r\n        title=\"examples of words to search: potted, blue, bulb\"\r\n      >\r\n        Clear price filter\r\n      </button>\r\n          <InputNumber\r\n            max={storeMaxPrice}\r\n            style={{ margin: '0 16px' }}\r\n            value={priceRange[1]}\r\n            onChange={setPriceRange}\r\n          />\r\n          </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SliderFilterPrice;\r\n\r\n/*\r\n /* {\r\n    Object.keys(groupBy(products, \"price\")).map((price) => price);\r\n  }*/\r\n\r\n// useEffect(() => {\r\n/* setPriceRange(() => [\r\n      0,\r\n      Math.max(\r\n        ...products.map(\r\n          (product) => product.price.map((o) => o.y).map((o) => o.y),\r\n          0\r\n        )\r\n      ),\r\n    ]);*/\r\n//products.map((product) => product.price.map((o) => console.log(o)));\r\n/*console.log(\r\n      \"max: \",\r\n      Math.max(...products.map((product) => product.price), 0)\r\n    );\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n // }, []);\r\n  // const maxValueOfY = Math.max(...arrayToSearchIn.map(o => o.y), 0);\r\n*/\r\n","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\ListCategories\\ListCategories.js",[],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\CartDisplayContents\\CartDisplayContents.js",["180"],"import React, { useContext } from \"react\";\r\nimport ThemeContext from \"../../contexts/ThemeContexts\";\r\nimport CartItem from \"../CartItem/CartItem\";\r\n\r\n// old version before installing use-persisted-state:\r\n//import \"../storagetools/LocalStorageArrayTools.js\";\r\nimport createPersistedState from \"use-persisted-state\";\r\n\r\nimport \"./CartDisplayContents.css\";\r\n\r\nconst useCartState = createPersistedState(\"cart\");\r\n\r\nconst CartDisplayContents = ({numInCart, setNumInCart}) => {\r\n  const { theme } = useContext(ThemeContext);\r\n  //const cartItemsArray = JSON.parse(localStorage.getItem(\"cartArray\"));\r\n  const [cart, setCart] = useCartState({});\r\n\r\n  return (\r\n    <div>\r\n      {cart.length > 0 && (\r\n        <div\r\n          className=\"shoppingList\"\r\n          style={{\r\n            color: theme.listColor,\r\n          }}\r\n        >\r\n          {cart.map((item, i) => (\r\n            <CartItem item={item} key={i} numInCart={numInCart} setNumInCart={setNumInCart}/>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CartDisplayContents;\r\n\r\n// old version of displaying cart from localStorage,\r\n// before installing use-persisted-state:\r\n/*\r\nconst CartDisplayContents = () => {\r\n  const { theme } = useContext(ThemeContext);\r\n  const cartItemsArray = JSON.parse(localStorage.getItem(\"cartArray\"));\r\n  console.log(cartItemsArray);\r\n  return (\r\n    <div>\r\n      {cartItemsArray != null && cartItemsArray.length > 0 && (\r\n        <div\r\n          className=\"shoppingList\"\r\n          style={{\r\n            background: theme.listBackground,\r\n          }}\r\n        >\r\n          {cartItemsArray.map((item, i) => (\r\n            <CartItem item={item} key={i} />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n    */\r\n","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\CartItem\\CartItem.js",["181","182","183","184","185"],"import React, { useContext, useState, useEffect } from \"react\";\r\nimport ThemeContext from \"../../contexts/ThemeContexts\";\r\nimport \"./CartItem.css\";\r\nimport sale from \"../icons/green-leaves-sale.svg\";\r\nimport deleteIcon from \"../icons/trash.png\";\r\nimport editIcon from \"../icons/editIcon.png\";\r\nimport upArrow from \"../icons/upArrow.png\";\r\nimport downArrow from \"../icons/downArrow.png\";\r\nimport \"../../components/storagetools/LocalStorageArrayTools.js\";\r\n\r\n// custom hook for updating state from local storage\r\nimport createPersistedState from \"use-persisted-state\";\r\nconst useCartState = createPersistedState(\"cart\");\r\n\r\nconst CartItem = ({ item, numInCart, setNumInCart, quantityWarnText = \"\", setQtyWarn }) => {\r\n  const { theme, toggleTheme } = useContext(ThemeContext);\r\n  const [products, setProducts] = useState({});\r\n  const [qtyLabel, setQtyLabel] = useState(\"\");\r\n  const [qty, setQty] = useState(item.quantity);\r\n  const [cart, setCart] = useCartState({});\r\n  //const {currentItems, setCurrentItems} = useState(cart.length > 0 ? cart : []);\r\n\r\n  const isSale = true;\r\n  //console.log(\"cart item: \", item);\r\n  //console.log(`cart item: ${item.title}, ${item.price}`);\r\nconsole.log(\"in cartItem, numincart is: \", numInCart);\r\n  console.log(\"item is \", item);\r\n  useEffect(() => {\r\n    fetch(`/api/products/${item.productid}`)\r\n      .then((response) => response.json())\r\n      .then((data) => setProducts(data));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const removeFromCart = (id) => {\r\n    // currentItems is given an empty array if getItem returns null (i.e. if no items have yet been added to cart):\r\n    // old version accessing localstorage directly\r\n    //let currentItems = JSON.parse(localStorage.getItem(\"cart\") || \"[]\");\r\n\r\n    // new version using custom hook to access localstorage\r\n   let currentItems = cart.length > 0 ? cart : [];\r\n\r\n    // find index of item in cart array\r\n    if(currentItems.length > 0)  {\r\n    const index = currentItems.findIndex(\r\n      (findItem) => findItem.productid === id\r\n    );\r\n\r\n    // then use index to take item out of array\r\n    console.log(\"id of item: \", id);\r\n    //const quantityInCart = currentItems[index].quantity;\r\n    console.log(\"index of item to remove: \", index);\r\n    currentItems = [\r\n      ...currentItems.slice(0, index),\r\n      ...currentItems.slice(index + 1),\r\n    ];\r\n    // setCurrentItems([\r\n    //   ...currentItems.slice(0, index),\r\n    //   ...currentItems.slice(index + 1),\r\n    // ]);\r\n\r\n    // localStorage.pushArrayItem(\r\n    //   \"cartArray\",\r\n    //   `title: ${title}, price: ${price}, image: ${image}`\r\n    // );\r\n\r\n    // old version - accessing localstorage directly:\r\n    // localStorage.setItem(\"cart\", JSON.stringify(currentItems));\r\n    // let origCartQty = JSON.parse(localStorage.getItem(\"cartQty\"));\r\n    // alert(\"orig qty:\", origCartQty);\r\n\r\n    // origCartQty -= quantityInCart;\r\n    // alert(\"orig qty:\", origCartQty);\r\n\r\n    // localStorage.setItem(\"cartQty\", origCartQty);\r\n\r\n    // new version, using custom hook:\r\n    setCart(currentItems);\r\n    setNumInCart(numInCart-1)\r\n    setQty(0);\r\n    if(quantityWarnText!==\"\")setQtyWarn(\"\");\r\n  \r\n  }\r\n  };\r\n\r\n  const editItemCartQty = (id, qty) => {\r\n    // currentItems is given an empty array if getItem returns null (i.e. if no items have yet been added to cart):\r\n    //let currentItems = JSON.parse(localStorage.getItem(\"cartArray\") || \"[]\");\r\n   let currentItems = cart.length > 0 ? cart : [];\r\n    // let tempCartItem={};\r\n    if (currentItems.length > 0){\r\n    // let tempCartItems = currentItems;\r\n    // console.log(\"cartitem curritemsL \", currentItems);\r\n    // find index of item in cart array\r\n    const index = currentItems.findIndex(\r\n      (findItem) => findItem.productid === id\r\n    );\r\n    // const index = tempCartItems.findIndex(\r\n    //   (findItem) => findItem.productid === id\r\n    // );\r\n    //alert(\"currentItems are: \", currentItems);\r\n    if(quantityWarnText!==\"\")setQtyWarn(\"\");\r\n\r\n    console.log(\"item to change: \", index, \"from id \", id);\r\n\r\n    console.log(\"qty prev in cart \", currentItems[index].quantity);\r\n    console.log(\"from API: \", products);\r\n    // then use index to take item out of array\r\n    if (currentItems[index].quantity + qty <= products.quantityInStock) {\r\n      // tempCartItem = currentItems[index];\r\n      // tempCartItem.quantity += qty;\r\n      // setCurrentItems([\r\n      //   ...currentItems.slice(0, index),\r\n      //   tempCartItem,\r\n      //   ...currentItems.slice(index + 1),\r\n      // ]);\r\n      currentItems[index].quantity += qty;\r\n      console.log(`numInCart: ${numInCart} adding qty: ${qty}, num in stock: ${products.quantityInStock}`);\r\n\r\n      setQtyLabel(\"\");\r\n     setNumInCart(numInCart+qty);\r\n    } else {\r\n      console.log(\"not enough in stock\");\r\n      console.log(`numInCart: ${numInCart} wanting to add qty: ${qty}, num in stock: ${products.quantityInStock}`);\r\n\r\n      setQtyLabel(`There are only ${products.quantityInStock} items in stock`);\r\n    }\r\n    console.log(\r\n      \"num in stock: \",\r\n      products.quantityInStock,\r\n      \" num wanted b4\",\r\n      currentItems[index].quantity,\r\n      \" more: \",\r\n      qty\r\n    );\r\n    console.log(\"qty now in cart \", currentItems[index].quantity);\r\n    // localStorage.pushArrayItem(\r\n    //   \"cartArray\",\r\n    //   `title: ${title}, price: ${price}, image: ${image}`\r\n    // );\r\n\r\n    // old way to update cart - directly via localstorage\r\n\r\n    // localStorage.setItem(\"cartArray\", JSON.stringify(currentItems));\r\n\r\n    // // update as well total number of items in cart\r\n    // let origCartQty = JSON.parse(localStorage.getItem(\"cartQty\"));\r\n    // origCartQty += qty;\r\n    // localStorage.setItem(\"cartQty\", origCartQty);\r\n\r\n    // if reduce quantity to 0, remove item from cart:\r\n    if (currentItems[index].quantity === 0)\r\n      removeFromCart(currentItems[index].productid);\r\n    else {\r\n      // update cart with new quantity of item\r\n      console.log(\"cartitem curritems \", currentItems);\r\n      // new way to update localstorage - via custom hook :\r\n      setCart(currentItems);\r\n      setQty(currentItems[index].quantity);\r\n    }\r\n  }\r\n  };\r\n\r\n  return (\r\n    <div className=\"cartItemDisplay\">\r\n      <div className=\"itemIconImage\">\r\n        {(item.saleReductionPercent>0) && <img className=\"saleIcon\" src={sale} alt=\"sale icon\" />}\r\n        {(item.saleReductionPercent==0) && <div className=\"noSaleBox\"></div>}\r\n        <img className=\"itemIcon\" src={item.image} alt=\"showing the item\" />\r\n      </div>\r\n      <div className=\"itemNamePrice\">\r\n      <div className=\"itemName\">{item.title}</div>\r\n      {item.saleReductionPercent > 0 && (\r\n        <div style={{ color: \"red\" }} className=\"itemPrice\">\r\n          sale price: ${(item.price * (100 - item.saleReductionPercent)) / 100}\r\n        </div>\r\n      )}\r\n      {item.saleReductionPercent === 0 && (\r\n        <div className=\"itemPrice\">price: ${item.price} </div>\r\n      )}\r\n      </div>\r\n      <div className=\"itemQtyBoxContainer\">\r\n        <div className=\"itemQtyBox\">\r\n          <div className=\"itemPrice\">quantity: </div>\r\n\r\n          <div className=\"itemQtyNumArrows\">\r\n            <img\r\n              className=\"upDownIcon\"\r\n              src={downArrow}\r\n              alt=\"click here to reduce item quantity\"\r\n              onClick={(e) => editItemCartQty(item.productid, -1)}\r\n            />\r\n            <div id=\"itemQuantity\" className=\"itemQuantity\">\r\n              {qty}\r\n            </div>\r\n            <img\r\n              className=\"upDownIcon\"\r\n              src={upArrow}\r\n              alt=\"click here to increase item quantity\"\r\n              onClick={(e) => editItemCartQty(item.productid, 1)}\r\n            />\r\n            <img\r\n            className=\"deleteIcon\"\r\n            src={deleteIcon}\r\n            alt=\"click here to remove item from cart\"\r\n            onClick={(e) => removeFromCart(item.productid)}\r\n          />\r\n          </div>\r\n\r\n          \r\n        </div>\r\n\r\n        <label htmlFor=\"itemQuantity\">{qtyLabel}</label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CartItem;\r\n",{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","severity":1,"message":"191","line":40,"column":10,"nodeType":"192","messageId":"193","endLine":40,"endColumn":19},{"ruleId":"190","severity":1,"message":"194","line":40,"column":21,"nodeType":"192","messageId":"193","endLine":40,"endColumn":33},{"ruleId":"190","severity":1,"message":"195","line":2,"column":10,"nodeType":"192","messageId":"193","endLine":2,"endColumn":20},{"ruleId":"190","severity":1,"message":"196","line":2,"column":8,"nodeType":"192","messageId":"193","endLine":2,"endColumn":19},{"ruleId":"190","severity":1,"message":"197","line":4,"column":8,"nodeType":"192","messageId":"193","endLine":4,"endColumn":19},{"ruleId":"190","severity":1,"message":"198","line":4,"column":23,"nodeType":"192","messageId":"193","endLine":4,"endColumn":28},{"ruleId":"190","severity":1,"message":"199","line":17,"column":10,"nodeType":"192","messageId":"193","endLine":17,"endColumn":21},{"ruleId":"190","severity":1,"message":"200","line":18,"column":11,"nodeType":"192","messageId":"193","endLine":18,"endColumn":15},{"ruleId":"190","severity":1,"message":"201","line":18,"column":17,"nodeType":"192","messageId":"193","endLine":18,"endColumn":27},{"ruleId":"202","severity":1,"message":"203","line":48,"column":4,"nodeType":"204","endLine":48,"endColumn":19},{"ruleId":"202","severity":1,"message":"205","line":48,"column":4,"nodeType":"204","endLine":48,"endColumn":19,"suggestions":"206"},{"ruleId":"190","severity":1,"message":"207","line":6,"column":24,"nodeType":"192","messageId":"193","endLine":6,"endColumn":30},{"ruleId":"190","severity":1,"message":"198","line":7,"column":23,"nodeType":"192","messageId":"193","endLine":7,"endColumn":28},{"ruleId":"190","severity":1,"message":"201","line":39,"column":17,"nodeType":"192","messageId":"193","endLine":39,"endColumn":27},{"ruleId":"190","severity":1,"message":"208","line":41,"column":11,"nodeType":"192","messageId":"193","endLine":41,"endColumn":15},{"ruleId":"190","severity":1,"message":"209","line":44,"column":30,"nodeType":"192","messageId":"193","endLine":44,"endColumn":45},{"ruleId":"190","severity":1,"message":"210","line":50,"column":10,"nodeType":"192","messageId":"193","endLine":50,"endColumn":19},{"ruleId":"190","severity":1,"message":"211","line":53,"column":22,"nodeType":"192","messageId":"193","endLine":53,"endColumn":28},{"ruleId":"190","severity":1,"message":"212","line":88,"column":13,"nodeType":"192","messageId":"193","endLine":88,"endColumn":19},{"ruleId":"213","severity":1,"message":"214","line":249,"column":20,"nodeType":"215","messageId":"216","endLine":254,"endColumn":12},{"ruleId":"190","severity":1,"message":"217","line":5,"column":8,"nodeType":"192","messageId":"193","endLine":5,"endColumn":14},{"ruleId":"190","severity":1,"message":"218","line":6,"column":8,"nodeType":"192","messageId":"193","endLine":6,"endColumn":16},{"ruleId":"190","severity":1,"message":"198","line":10,"column":23,"nodeType":"192","messageId":"193","endLine":10,"endColumn":28},{"ruleId":"190","severity":1,"message":"219","line":18,"column":10,"nodeType":"192","messageId":"193","endLine":18,"endColumn":15},{"ruleId":"190","severity":1,"message":"220","line":19,"column":10,"nodeType":"192","messageId":"193","endLine":19,"endColumn":21},{"ruleId":"190","severity":1,"message":"221","line":19,"column":23,"nodeType":"192","messageId":"193","endLine":19,"endColumn":37},{"ruleId":"190","severity":1,"message":"222","line":20,"column":10,"nodeType":"192","messageId":"193","endLine":20,"endColumn":26},{"ruleId":"190","severity":1,"message":"208","line":33,"column":11,"nodeType":"192","messageId":"193","endLine":33,"endColumn":15},{"ruleId":"190","severity":1,"message":"223","line":46,"column":9,"nodeType":"192","messageId":"193","endLine":46,"endColumn":28},{"ruleId":"190","severity":1,"message":"224","line":50,"column":9,"nodeType":"192","messageId":"193","endLine":50,"endColumn":26},{"ruleId":"190","severity":1,"message":"225","line":1,"column":29,"nodeType":"192","messageId":"193","endLine":1,"endColumn":37},{"ruleId":"190","severity":1,"message":"226","line":1,"column":39,"nodeType":"192","messageId":"193","endLine":1,"endColumn":48},{"ruleId":"190","severity":1,"message":"201","line":7,"column":17,"nodeType":"192","messageId":"193","endLine":7,"endColumn":27},{"ruleId":"190","severity":1,"message":"227","line":8,"column":11,"nodeType":"192","messageId":"193","endLine":8,"endColumn":16},{"ruleId":"190","severity":1,"message":"228","line":8,"column":18,"nodeType":"192","messageId":"193","endLine":8,"endColumn":29},{"ruleId":"190","severity":1,"message":"201","line":10,"column":17,"nodeType":"192","messageId":"193","endLine":10,"endColumn":27},{"ruleId":"229","severity":1,"message":"230","line":18,"column":36,"nodeType":"231","messageId":"232","endLine":18,"endColumn":38},{"ruleId":"229","severity":1,"message":"230","line":19,"column":33,"nodeType":"231","messageId":"232","endLine":19,"endColumn":35},{"ruleId":"202","severity":1,"message":"233","line":22,"column":6,"nodeType":"234","endLine":22,"endColumn":51,"suggestions":"235"},{"ruleId":"190","severity":1,"message":"236","line":23,"column":5,"nodeType":"192","messageId":"193","endLine":23,"endColumn":16},{"ruleId":"190","severity":1,"message":"201","line":30,"column":17,"nodeType":"192","messageId":"193","endLine":30,"endColumn":27},{"ruleId":"190","severity":1,"message":"237","line":32,"column":16,"nodeType":"192","messageId":"193","endLine":32,"endColumn":23},{"ruleId":"190","severity":1,"message":"226","line":1,"column":27,"nodeType":"192","messageId":"193","endLine":1,"endColumn":36},{"ruleId":"190","severity":1,"message":"238","line":1,"column":38,"nodeType":"192","messageId":"193","endLine":1,"endColumn":48},{"ruleId":"190","severity":1,"message":"237","line":16,"column":14,"nodeType":"192","messageId":"193","endLine":16,"endColumn":21},{"ruleId":"190","severity":1,"message":"228","line":8,"column":18,"nodeType":"192","messageId":"193","endLine":8,"endColumn":29},{"ruleId":"190","severity":1,"message":"239","line":12,"column":40,"nodeType":"192","messageId":"193","endLine":12,"endColumn":46},{"ruleId":"190","severity":1,"message":"226","line":1,"column":17,"nodeType":"192","messageId":"193","endLine":1,"endColumn":26},{"ruleId":"190","severity":1,"message":"225","line":1,"column":40,"nodeType":"192","messageId":"193","endLine":1,"endColumn":48},{"ruleId":"190","severity":1,"message":"240","line":2,"column":8,"nodeType":"192","messageId":"193","endLine":2,"endColumn":17},{"ruleId":"190","severity":1,"message":"198","line":5,"column":23,"nodeType":"192","messageId":"193","endLine":5,"endColumn":28},{"ruleId":"190","severity":1,"message":"207","line":7,"column":24,"nodeType":"192","messageId":"193","endLine":7,"endColumn":30},{"ruleId":"190","severity":1,"message":"241","line":22,"column":5,"nodeType":"192","messageId":"193","endLine":22,"endColumn":14},{"ruleId":"190","severity":1,"message":"239","line":26,"column":5,"nodeType":"192","messageId":"193","endLine":26,"endColumn":11},{"ruleId":"190","severity":1,"message":"208","line":32,"column":11,"nodeType":"192","messageId":"193","endLine":32,"endColumn":15},{"ruleId":"190","severity":1,"message":"225","line":1,"column":40,"nodeType":"192","messageId":"193","endLine":1,"endColumn":48},{"ruleId":"190","severity":1,"message":"242","line":6,"column":24,"nodeType":"192","messageId":"193","endLine":6,"endColumn":36},{"ruleId":"190","severity":1,"message":"243","line":14,"column":9,"nodeType":"192","messageId":"193","endLine":14,"endColumn":18},{"ruleId":"190","severity":1,"message":"237","line":16,"column":16,"nodeType":"192","messageId":"193","endLine":16,"endColumn":23},{"ruleId":"190","severity":1,"message":"244","line":6,"column":8,"nodeType":"192","messageId":"193","endLine":6,"endColumn":16},{"ruleId":"190","severity":1,"message":"227","line":16,"column":11,"nodeType":"192","messageId":"193","endLine":16,"endColumn":16},{"ruleId":"190","severity":1,"message":"228","line":16,"column":18,"nodeType":"192","messageId":"193","endLine":16,"endColumn":29},{"ruleId":"190","severity":1,"message":"239","line":23,"column":9,"nodeType":"192","messageId":"193","endLine":23,"endColumn":15},{"ruleId":"229","severity":1,"message":"245","line":168,"column":36,"nodeType":"231","messageId":"232","endLine":168,"endColumn":38},"no-native-reassign",["246"],"no-negated-in-lhs",["247"],"no-unused-vars","'numInCart' is assigned a value but never used.","Identifier","unusedVar","'setNumInCart' is assigned a value but never used.","'withRouter' is defined but never used.","'DisplayUser' is defined but never used.","'SaleContext' is defined but never used.","'sales' is defined but never used.","'numProducts' is assigned a value but never used.","'user' is assigned a value but never used.","'toggleUser' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","MemberExpression","React Hook useEffect has a missing dependency: 'products.length'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setNumProds' needs the current value of 'products.length'.",["248"],"'themes' is defined but never used.","'sale' is assigned a value but never used.","'setFieldsFilled' is assigned a value but never used.","'productId' is assigned a value but never used.","'setURL' is assigned a value but never used.","'result' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'Header' is defined but never used.","'Products' is defined but never used.","'color' is assigned a value but never used.","'secondsLeft' is assigned a value but never used.","'setSecondsLeft' is assigned a value but never used.","'salesProductsIds' is assigned a value but never used.","'addButtonLabelStyle' is assigned a value but never used.","'checkFieldsFilled' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'theme' is assigned a value but never used.","'toggleTheme' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'products'. Either include it or remove the dependency array.","ArrayExpression",["249"],"'setProducts' is assigned a value but never used.","'setCart' is assigned a value but never used.","'useReducer' is defined but never used.","'isSale' is assigned a value but never used.","'PropTypes' is defined but never used.","'productid' is assigned a value but never used.","'currentTheme' is defined but never used.","'formatter' is assigned a value but never used.","'editIcon' is defined but never used.","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation",{"desc":"250","fix":"251"},{"desc":"252","fix":"253"},"Update the dependencies array to be: [products.length]",{"range":"254","text":"255"},"Update the dependencies array to be: [priceRange, selectedCategory, searchKeyword, products]",{"range":"256","text":"257"},[1745,1760],"[products.length]",[1108,1153],"[priceRange, selectedCategory, searchKeyword, products]"]