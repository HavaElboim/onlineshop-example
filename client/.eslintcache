[{"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\index.js":"1","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\reportWebVitals.js":"2","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\App.js":"3","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\contexts\\ThemeContexts.js":"4","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\contexts\\UserContexts.js":"5","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\contexts\\SaleContexts.js":"6","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\pages\\Home\\Home.js":"7","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\pages\\ProductInfo\\ProductInfo.js":"8","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\pages\\Admin\\Admin.js":"9","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\ChangeThemeColors\\ChangeThemeColors.js":"10","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\pages\\About\\About.js":"11","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\DisplayUser\\DisplayUser.js":"12","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\storagetools\\LocalStorageArrayTools.js":"13","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\Products\\Products.js":"14","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\Header\\Header.js":"15","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\CategorySelectAdmin\\CategorySelectAdmin.js":"16","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\CartIcon\\CartIcon.js":"17","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\ChangeUser\\ChangeUser.js":"18","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\SearchKeyword\\SearchKeyword.js":"19","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\SaleCountdown\\SaleCountdown.js":"20","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\CategorySelect\\CategorySelect.js":"21","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\ProductDisplayClass\\ProductDisplayClass.js":"22","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\SliderFilterPrice\\SliderFilterPrice.js":"23","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\ListCategories\\ListCategories.js":"24","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\CartDisplayContents\\CartDisplayContents.js":"25","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\CartItem\\CartItem.js":"26"},{"size":517,"mtime":1619161537280,"results":"27","hashOfConfig":"28"},{"size":375,"mtime":1619161537288,"results":"29","hashOfConfig":"28"},{"size":4090,"mtime":1619444232918,"results":"30","hashOfConfig":"28"},{"size":634,"mtime":1619449157195,"results":"31","hashOfConfig":"28"},{"size":339,"mtime":1619161537278,"results":"32","hashOfConfig":"28"},{"size":688,"mtime":1619161537277,"results":"33","hashOfConfig":"28"},{"size":2588,"mtime":1619782344956,"results":"34","hashOfConfig":"28"},{"size":21532,"mtime":1619436815186,"results":"35","hashOfConfig":"28"},{"size":8144,"mtime":1619161537284,"results":"36","hashOfConfig":"28"},{"size":628,"mtime":1619761154939,"results":"37","hashOfConfig":"28"},{"size":293,"mtime":1619161537282,"results":"38","hashOfConfig":"28"},{"size":551,"mtime":1619161537251,"results":"39","hashOfConfig":"28"},{"size":1112,"mtime":1619161537275,"results":"40","hashOfConfig":"28"},{"size":3021,"mtime":1619761154946,"results":"41","hashOfConfig":"28"},{"size":3002,"mtime":1619761154941,"results":"42","hashOfConfig":"28"},{"size":1763,"mtime":1619161537246,"results":"43","hashOfConfig":"28"},{"size":2780,"mtime":1619761154933,"results":"44","hashOfConfig":"28"},{"size":714,"mtime":1619450058587,"results":"45","hashOfConfig":"28"},{"size":1714,"mtime":1619761154950,"results":"46","hashOfConfig":"28"},{"size":3658,"mtime":1619161537260,"results":"47","hashOfConfig":"28"},{"size":1462,"mtime":1619761154937,"results":"48","hashOfConfig":"28"},{"size":3369,"mtime":1619761154944,"results":"49","hashOfConfig":"28"},{"size":2814,"mtime":1619761154953,"results":"50","hashOfConfig":"28"},{"size":1434,"mtime":1619761154942,"results":"51","hashOfConfig":"28"},{"size":1747,"mtime":1619449187431,"results":"52","hashOfConfig":"28"},{"size":8096,"mtime":1619452705471,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"4yp0k4",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"56"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"116"},"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\index.js",[],["117","118"],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\reportWebVitals.js",[],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\App.js",["119","120"],"import \"./App.css\";\r\nimport { useState } from \"react\";\r\n\r\n//for SPAP:\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\n//imports of pages definitions\r\nimport Home from \"./pages/Home/Home\";\r\nimport About from \"./pages/About/About\";\r\nimport Admin from \"./pages/Admin/Admin\";\r\nimport ProductInfo from \"./pages/ProductInfo/ProductInfo\";\r\nimport DisplayUser from \"./components/DisplayUser/DisplayUser\";\r\nimport ChangeThemeColors from \"./components/ChangeThemeColors/ChangeThemeColors\";\r\n\r\nimport ThemeContext, { themes } from \"./contexts/ThemeContexts\";\r\nimport UserContext, { users } from \"./contexts/UserContexts\";\r\nimport SaleContext, { sales } from \"./contexts/SaleContexts\";\r\n\r\nimport FlowerBaseSVG from \"./components/icons/SpringFlowerWithGrassArtBackground.svg\";\r\n\r\n/* App calls ProductsContainerClass\r\n  which calls SaleCountdown\r\n  which calls Products\r\n  which calls ListCategories, and also calls ProductDisplayClass.\r\n  ProductDisplayClass renders each product seperately in a product card.\r\n  Products maps the array containing the shop information into separate items each containing info of one product.\r\n\r\nHeader calls SaleCountdown component which counts the time until end of sale and sets the Sale Message in the Header\r\nHeader also calls CategorySelect component to choose products filter. \r\n  */\r\n\r\n//see here for example of changing theme:\r\n// https://stackoverflow.com/questions/54738681/how-to-change-context-value-while-using-react-hook-of-usecontext\r\n\r\nconst App = () => {\r\n  const [theme, setTheme] = useState(themes.light);\r\n  const [user, setUser] = useState(users.guest);\r\n  const [sale, setSale] = useState(sales.endOfYearSale);\r\n  const [numInCart, setNumInCart] = useState(0);\r\n\r\n  function toggleTheme() {\r\n    setTheme((theme) => (theme === themes.light ? themes.dark : themes.light));\r\n  }\r\n\r\n  function toggleUser() {\r\n    console.log(\"request to change user\");\r\n    setUser((user) => (user === users.guest ? users.admin : users.guest));\r\n    console.log(\"logged in as user \", user.name);\r\n  }\r\n\r\n  function switchSale(specialOffer) {\r\n    console.log(\"set sale to \", sales.name);\r\n    setSale((sale) => sale === sales.endOfYearSale);\r\n  }\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      <UserContext.Provider value={{ user, toggleUser }}>\r\n        <SaleContext.Provider value={{ sale, switchSale }}>\r\n          <Router>\r\n            <div\r\n              className=\"outer-div\"\r\n              style={{ color: theme.foreground, background: theme.background }}\r\n            >\r\n              <div className=\"inner-outer-div\">\r\n              <ChangeThemeColors />\r\n              <DisplayUser />\r\n              <nav>\r\n                <ul>\r\n                  <li>\r\n                    <Link to=\"/Home\">Home</Link>\r\n                  </li>\r\n                  <li>\r\n                    <Link to=\"/About\">About</Link>\r\n                  </li>\r\n                  {user.name === \"Admin\" && (\r\n                    <li>\r\n                      <Link to=\"/Admin\">Admin - add new product</Link>\r\n                    </li>\r\n                  )}\r\n                </ul>\r\n              </nav>\r\n\r\n              {/* A <Switch> looks through its children <Route>s and\r\n        renders the first one that matches the current URL. */}\r\n              <Switch>\r\n                <Route path=\"/Admin\">\r\n                  <Admin />\r\n                </Route>\r\n                <Route exact path=\"/Home\">\r\n                  <Home />\r\n                </Route>\r\n                <Route path=\"/About\">\r\n                  <About />\r\n                </Route>\r\n                <Route path=\"/products/:_id\" component={ProductInfo}></Route>\r\n                <Route path=\"/\">\r\n                  <Home />\r\n                </Route>\r\n              </Switch>\r\n              </div>\r\n              <img src={FlowerBaseSVG} className=\"imgBottom\" alt=\"flower decoration\"/>\r\n            </div>\r\n          </Router>\r\n        </SaleContext.Provider>\r\n      </UserContext.Provider>\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\contexts\\ThemeContexts.js",[],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\contexts\\UserContexts.js",[],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\contexts\\SaleContexts.js",["121"],"import { createContext } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nconst sales = {\r\n  endOfYearSale: {\r\n    isSale: \"true\",\r\n    percentOff: 20,\r\n    dateEnd: \"2021-10-25\",\r\n    name: \"End of Year Sale\",\r\n    color: \"#002200\",\r\n  },\r\n  noSale: {\r\n    isSale: \"false\",\r\n    percentOff: 0,\r\n    dateEnd: \"2015-03-25\",\r\n    name: \"No special offers\",\r\n    color: \"#002200\",\r\n  },\r\n  summerSale: {\r\n    isSale: \"true\",\r\n    percentOff: 10,\r\n    dateEnd: \"2020-08-31\",\r\n    name: \"Summer Sale\",\r\n    color: \"#002200\",\r\n  },\r\n};\r\n\r\nlet currentSale = sales.endOfYearSale;\r\nconst SaleContext = createContext(null);\r\nexport { sales, currentSale };\r\nexport default SaleContext;\r\n","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\pages\\Home\\Home.js",["122","123","124","125","126","127","128","129"],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\pages\\ProductInfo\\ProductInfo.js",["130","131","132","133","134","135","136","137","138"],"import { React, useState, useEffect, useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"./ProductInfo.css\";\r\nimport UserContext from \"../../contexts/UserContexts\";\r\nimport ThemeContext, { themes } from \"../../contexts/ThemeContexts\";\r\nimport SaleContext, { sales } from \"../../contexts/SaleContexts\";\r\n\r\nimport \"../../components/storagetools/LocalStorageArrayTools.js\";\r\nimport CategorySelectAdmin from \"../../components/CategorySelectAdmin/CategorySelectAdmin\";\r\n// import saleIcon from \"../../components/icons/sale-icon-png-19.png\";\r\nimport saleIcon from \"../../components/icons/saleGreenBig.png\";\r\nimport CartIcon from \"../../components/CartIcon/CartIcon\";\r\n\r\n// custom hook for updating state from local storage\r\nimport createPersistedState from \"use-persisted-state\";\r\nconst useCartState = createPersistedState(\"cart\");\r\n/*\r\nmongodb+srv://test-user1:12345@cluster0.u00wy.mongodb.net/gocodeshop-hava?retryWrites=true&w=majority&tlsInsecure=true\r\n*/\r\n\r\n/* mongoDB version on localhost:\r\nuseEffect(() => {\r\n    fetch(`http://10.0.0.193:8000/products/${match.params.productid}`)\r\n      .then((response) => response.json())\r\n      .then((data) => setData(data));\r\n    console.log(\r\n      \"descr is \",\r\n      productData,\r\n      ` from http://10.0.0.193:8000/products/${match.params.productid}`\r\n    );\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  */\r\n\r\nconst ProductInfo = ({ match }) => {\r\n  const [products, setProducts] = useState({});\r\n  const { user, toggleUser } = useContext(UserContext);\r\n  const { theme } = useContext(ThemeContext);\r\n  const { sale } = useContext(SaleContext);\r\n  const [quantity, setQuantity] = useState(1);\r\n  const [editProduct, setEditProduct] = useState(false);\r\n  const [notAllFieldsFilled, setFieldsFilled] = useState(false);\r\n\r\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\r\n  const [onSale, setSale] = useState(\"false\");\r\n  const [saleReductionPercent, setReduction] = useState(\"\");\r\n\r\n  const [productId, setId] = useState(\"\");\r\n  const [productName, setName] = useState(\"\");\r\n  const [productDescription, setDescription] = useState(\"\");\r\n  const [productURL, setURL] = useState(\"\");\r\n  const [productPrice, setPrice] = useState(\"\");\r\n  const [quantityInStock, setStockQuantity] = useState(\"\");\r\n\r\n  const [stopEditText, setStopEditText] = useState(\"Exit product update\");\r\n  const [quantityWarnText, setQtyWarn] = useState(\"\");\r\n\r\n  const deleteProductText = \"Delete product\";\r\n  console.log(\"in productinfo, theme is: \", theme.foreground);\r\n  //console.log(\"sale is\", sale.isSale);\r\n  const [cart, setCart] = useCartState({});\r\n  const [numInCart, setNumInCart] = useState(cart.reduce((n, { quantity }) => n + quantity, 0));\r\n\r\n  console.log(\"!!!!!!!!!!!!!!!!!!!!! In ProductInfo, numInCart is: \", numInCart);\r\n  useEffect(() => {\r\n    fetch(`/api/products/${match.params._id}`)\r\n      .then((response) => response.json())\r\n      .then((data) => setProducts(data));\r\n    console.log(\"descr is \", products, ` /api/products/${match.params._id}`);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  //const newPrice = +(productPrice * 0.9).toFixed(2);\r\n\r\n  const deleteProductFn = async (id) => {\r\n    console.log(`deleting product ${id}`);\r\n\r\n    if (window.confirm(\"Delete this product?\")) {\r\n      const res = await fetch(`/api/products/${match.params._id}`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n\r\n      const result = await res.json();\r\n    }\r\n  };\r\n\r\n  const editProductFn = async (\r\n    title,\r\n    description,\r\n    price,\r\n    category,\r\n    url,\r\n    quantityInStock,\r\n    onSale,\r\n    saleReductionPercent,\r\n    id\r\n  ) => {\r\n    console.log(\"in edit product in client\");\r\n\r\n    setStockQuantity(quantityInStock);\r\n    setDescription(description);\r\n    setPrice(price);\r\n    setName(title);\r\n    setSelectedCategory(category);\r\n    setSale(onSale);\r\n\r\n    setEditProduct(false);\r\n    setStopEditText(\"Done\");\r\n    setReduction(saleReductionPercent);\r\n\r\n    const res = await fetch(`/api/products/${match.params._id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        title: title,\r\n        description,\r\n        price,\r\n        category,\r\n        url,\r\n        quantityInStock,\r\n        onSale,\r\n        saleReductionPercent,\r\n      }),\r\n    });\r\n\r\n    const product = await res.json();\r\n\r\n    console.log(\"editing product \", product);\r\n  };\r\n\r\n  const copyProductDetails = () => {\r\n    setStockQuantity(products.quantityInStock);\r\n    setDescription(products.description);\r\n    setPrice(products.price);\r\n    setName(products.title);\r\n    setSelectedCategory(products.category);\r\n    setSale(products.onSale);\r\n    setReduction(products.saleReductionPercent);\r\n    setId(match.params._id);\r\n  };\r\n\r\n  const selectNumberToBuyAddOrRemoveOne = (qty) => {\r\n    if (quantity + qty < 0) {\r\n      setQtyWarn(\"\");\r\n    } else if (quantity + qty <= products.quantityInStock) {\r\n      setQuantity(quantity + qty);\r\n      setQtyWarn(\"\");\r\n    } else {\r\n      switch (products.quantityInStock) {\r\n        case 0:\r\n          setQtyWarn(`There are no more ${products.title}s in stock`);\r\n          break;\r\n        case 1:\r\n          setQtyWarn(`There is only 1 ${products.title} in stock`);\r\n          break;\r\n        default: {\r\n          setQtyWarn(\r\n            `There are only ${products.quantityInStock} ${products.title}s in stock`\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // see here for how to add objects to localStorage:\r\n  // https://stackoverflow.com/questions/2010892/storing-objects-in-html5-localstorage/23516713#23516713\r\n  // https://stackoverflow.com/questions/62504525/persistence-with-localstorage-with-usestate-and-usecontext-react-hooks\r\n  // https://stackoverflow.com/questions/63925254/useeffect-localstorage-loop\r\n  // https://egghead.io/lessons/react-store-values-in-localstorage-with-the-react-useeffect-hook\r\n\r\n  const addToCart = (\r\n    title,\r\n    price,\r\n    image,\r\n    quantity,\r\n    id,\r\n    onSale,\r\n    saleReductionPercent\r\n  ) => {\r\n    setQtyWarn(\"\");\r\n\r\n    // if item is not on sale, change price reduction to 0\r\n    if (!onSale) saleReductionPercent = 0;\r\n \r\n    console.log(\"adding to cart.................\");\r\n    console.log(\"cart contains \", cart);\r\n\r\n    let currentItems = cart.length > 0 ? cart : [];\r\n\r\n    // new version using custom hook:\r\n\r\n    console.log(\"current # of cart items: \" + currentItems.length);\r\n    console.log(\"cart contains \", currentItems);\r\n    console.log(\"first item is currentItems[0] = \", currentItems[0]);\r\n\r\n    // If there is already at least one item in the cart:\r\n    //// opened if currentItems.length\r\n    if (currentItems.length !== 0) {\r\n      console.log(\"there is already at least one item in the cart\");\r\n      currentItems.forEach(function (cartItem, index) {\r\n        console.log(\"currentItems[\" + index + \"]: \" + cartItem.productid  + cartItem.quantity);\r\n      });\r\n\r\n      cart.forEach(function (cartItem, index) {\r\n        console.log(\"cart[\" + index + \"]: \" + cartItem);\r\n      });\r\n\r\n      console.log(\"###### searching for id \", id, \"in currentItems \", currentItems);\r\n\r\n      // search to see if item already exists in cart\r\n      var checkItem = currentItems.find(\r\n        (checkItem) => checkItem.productid === id\r\n      );\r\n      console.log(\"checkitme is \", checkItem);\r\n\r\n      //// opened if checkItem undefined\r\n      // if checkItem is undefined, this particular item has not yet been added to the cart\r\n    if (checkItem !== undefined) {\r\n      // check if there is enough in stock\r\n      console.log(\"products are: \", products);\r\n         console.log(`there are ${checkItem.quantityInStock} in stock, ${checkItem.quantity} in the cart, and you want to add another ${quantity}`)\r\n      \r\n      //// opened if checkItem quantity\r\n      // check if there are enough items in stock to add the new quantity:\r\n      if(checkItem.quantity + quantity <= products.quantityInStock) {\r\n        //update the number of items of this item in the cart\r\n      checkItem.quantity += quantity;\r\n      //id = checkItem.productid;\r\n      console.log(\"item found in cart, need to update qty of item \", id);\r\n      // update the state displaying the total number of items in the cart\r\n      setNumInCart(numInCart+quantity);\r\n      }\r\n      else {\r\n        // warn user that there are not enough items in stock\r\n        switch (checkItem.quantityInStock - checkItem.quantity) {\r\n          case 0:\r\n            setQtyWarn(`There are no more ${products.title}s in stock`);\r\n            break;\r\n          case 1:\r\n            setQtyWarn(`There is only 1 more ${products.title} in stock`);\r\n            break;\r\n          default: {\r\n            setQtyWarn(\r\n              `There are only ${products.quantityInStock} ${products.title}s in stock`\r\n            );\r\n            ///end default case:\r\n          }\r\n          console.log(\"got to end block 2\");\r\n         /// end switch of number of products left in stock, when not enough:\r\n        }\r\n        console.log(\"got to end block 3\");\r\n         //// end of check for enough items in stock:\r\n      }\r\n      console.log(\"got to end block 4\");\r\n      ///// end of situation that this item is already in the cart:\r\n    } \r\n    //// if this item is not yet in the cart (but the cart is not empty):\r\n  else {\r\n    console.log(\"item not yet in cart, adding..\");\r\n      currentItems.push({\r\n        title: title,\r\n        price: price,\r\n        image: image,\r\n        quantity: quantity,\r\n        productid: id,\r\n        saleReductionPercent,\r\n      });\r\n            // update the state displaying the total number of items in the cart\r\n      setNumInCart(numInCart+quantity);\r\n      //// end of situation that the cart is not empty but this item was not yet in it\r\n    }\r\n    \r\n\r\n    /* old version - accessing localstorage directly:\r\n    localStorage.setItem(\"cartArray\", JSON.stringify(currentItems));\r\n\r\n    if (localStorage.getItem(\"cartQty\")) {\r\n      localStorage.setItem(\r\n        \"cartQty\",\r\n        +localStorage.getItem(\"cartQty\") + quantity\r\n      );\r\n      console.log(\"added to cart qty, total:\", localStorage.getItem(\"cartQty\"));\r\n    } else {\r\n      localStorage.setItem(\"cartQty\", quantity);\r\n      console.log(\r\n        \"initialized cart qty, total:\",\r\n        localStorage.getItem(\"cartQty\")\r\n      );\r\n    }\r\n    */\r\n    // new version, load array of items into cart state using custom hook:\r\n    setCart(currentItems);\r\n    console.log(\"added to cart qty, cart length:\", cart.length);\r\n\r\n    //// end of situation that the cart is non-empty\r\n  }\r\n  else {\r\n    // shopping cart was still empty. Add item directly\r\n    console.log(\"item not yet in cart, adding..\");\r\n      currentItems = [{\r\n        title: title,\r\n        price: price,\r\n        image: image,\r\n        quantity: quantity,\r\n        productid: id,\r\n        saleReductionPercent,\r\n      }];\r\n       // update the state displaying the total number of items in the cart\r\n      setNumInCart(numInCart+quantity);\r\n       // load array of items into cart state using custom hook:\r\n    setCart(currentItems);\r\n  }\r\n  console.log(\"got to end\");\r\n  };\r\n\r\n  // defining the key={numInCart} in the CartIcon component below forces it to\r\n  // rerender if numInCart changes\r\n  if (products) {\r\n    return (\r\n      <div>\r\n        <CartIcon key={numInCart} numInCart={numInCart} setNumInCart={setNumInCart}/>\r\n        {user.name === \"Admin\" && (\r\n          <div className=\"outer-group\">\r\n            {!editProduct && (\r\n              <button\r\n                id=\"setEditingButton\"\r\n                style={{\r\n                  background: theme.background,\r\n                  color: theme.foreground,\r\n                }}\r\n                onClick={(e) => {\r\n                  setEditProduct(!editProduct);\r\n                  copyProductDetails();\r\n                }}\r\n              >\r\n                Edit/delete product\r\n              </button>\r\n            )}\r\n            {editProduct && (\r\n              <>\r\n                <button\r\n                  id=\"exitEditButton\"\r\n                  style={{\r\n                    background: theme.background,\r\n                    color: theme.foreground,\r\n                  }}\r\n                  onClick={(e) => setEditProduct(false)}\r\n                >\r\n                  {stopEditText}\r\n                </button>\r\n                <Link to={`/products`}>\r\n                  <button\r\n                    id=\"deleteProductButton\"\r\n                    style={{\r\n                      background: theme.background,\r\n                      color: theme.foreground,\r\n                    }}\r\n                    onClick={(e) => deleteProductFn()}\r\n                  >\r\n                    {deleteProductText}\r\n                  </button>\r\n                </Link>\r\n              </>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {user.name !== \"Admin\" && (\r\n          <div className=\"outer-group\">\r\n            <div className=\"quantity-group\">\r\n              <button\r\n                style={{\r\n                  background: theme.background,\r\n                  color: theme.foreground,\r\n                }}\r\n                className=\"quantityBox quantityButton\"\r\n                onClick={() => {\r\n                  selectNumberToBuyAddOrRemoveOne(-1);\r\n                }}\r\n              >\r\n                -\r\n              </button>\r\n              <div className=\"quantityBox quantity-display\">{quantity}</div>\r\n              <button\r\n                style={{\r\n                  background: theme.background,\r\n                  color: theme.foreground,\r\n                }}\r\n                className=\"quantityBox quantityButton\"\r\n                onClick={() => {\r\n                  selectNumberToBuyAddOrRemoveOne(1);\r\n                }}\r\n              >\r\n                +\r\n              </button>\r\n              <button\r\n                className=\"addToCartButton\"\r\n                style={{\r\n                  background: theme.background,\r\n                  color: theme.foreground,\r\n                }}\r\n                id=\"addToCartButton\"\r\n                onClick={(e) => {\r\n                  addToCart(\r\n                    products.title,\r\n                    products.price,\r\n                    products.image,\r\n                    quantity,\r\n                    match.params._id,\r\n                    products.onSale,\r\n                    products.saleReductionPercent\r\n                  );\r\n                }}\r\n              >\r\n                Add to cart{\" \"}\r\n              </button>\r\n            </div>\r\n            <div style={{ color: \"red\" }}>{quantityWarnText}</div>\r\n          </div>\r\n        )}\r\n        {products.onSale && (\r\n          <div>\r\n            <img className=\"saleIconImg\" src={saleIcon} alt=\"on sale\" />\r\n          </div>\r\n        )}\r\n        {!editProduct && (\r\n          <div className=\"product-title\">{productName || products.title}</div>\r\n        )}\r\n        {user.name === \"Admin\" && editProduct && (\r\n          <div>\r\n            <div>Input name of product:</div>\r\n            <input\r\n              id=\"productName\"\r\n              value={productName}\r\n              onChange={(e) => setName(e.target.value)}\r\n              style={{ color: theme.background, background: theme.foreground }}\r\n            />\r\n            {productName.length === 0 && notAllFieldsFilled && (\r\n              <label for=\"productName\">Enter name of product</label>\r\n            )}\r\n          </div>\r\n        )}\r\n        <div className=\"product-image\">\r\n          <img src={products.image} alt={\"\"} />\r\n        </div>\r\n        <div>\r\n          {!editProduct && (\r\n            <>\r\n              <div className=\"product-info\">\r\n                {productDescription || products.description}\r\n              </div>\r\n              <div className=\"product-info\">\r\n                {products.quantityInStock} items in stock\r\n              </div>\r\n            </>\r\n          )}\r\n          {user.name === \"Admin\" && editProduct && (\r\n            <div>\r\n              <div>Input description of product:</div>\r\n              <input\r\n                id=\"productDescription\"\r\n                value={productDescription}\r\n                onChange={(e) => setDescription(e.target.value)}\r\n                style={{\r\n                  color: theme.background,\r\n                  background: theme.foreground,\r\n                }}\r\n              />{\" \"}\r\n            </div>\r\n          )}\r\n          {!editProduct && !products.onSale && (\r\n            <div className=\"product-info\">\r\n              $ {productPrice || products.price}\r\n            </div>\r\n          )}\r\n          {user.name === \"Admin\" && editProduct && (\r\n            <div>\r\n              <div>Input price of product:</div>\r\n              <input\r\n                id=\"productPrice\"\r\n                value={productPrice}\r\n                onChange={(e) => setPrice(e.target.value)}\r\n                style={{\r\n                  color: theme.background,\r\n                  background: theme.foreground,\r\n                }}\r\n              />\r\n              {products.price.length === 0 && notAllFieldsFilled && (\r\n                <label for=\"productPrice\">Enter price of product</label>\r\n              )}\r\n            </div>\r\n          )}\r\n          {products.onSale && (\r\n            <div>\r\n              <div className=\"product-info\" style={{ color: \"red\" }}>\r\n                Product on sale -{\" \"}\r\n                {saleReductionPercent || products.saleReductionPercent}% off!\r\n                Original price: $ {productPrice || products.price} Reduced to $\r\n                {(\r\n                  ((productPrice || products.price) *\r\n                    (100 -\r\n                      (saleReductionPercent ||\r\n                        products.saleReductionPercent))) /\r\n                  100\r\n                ).toFixed(2)}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n        {!editProduct && (\r\n          <div className=\"product-info\">\r\n            Category: {selectedCategory || products.category}\r\n          </div>\r\n        )}\r\n        {user.name === \"Admin\" && !editProduct && (\r\n          <div className=\"product-info\">\r\n            Number of product in stock: {products.quantityInStock}{\" \"}\r\n          </div>\r\n        )}\r\n        {user.name === \"Admin\" && editProduct && (\r\n          <div>\r\n            {products.length > 0 && (\r\n              <CategorySelectAdmin\r\n                selectedCategory={selectedCategory}\r\n                setSelectedCategory={setSelectedCategory}\r\n                products={products}\r\n              ></CategorySelectAdmin>\r\n            )}\r\n            <div>Number of product in stock:</div>\r\n            <input\r\n              id=\"quantityInStock\"\r\n              value={quantityInStock}\r\n              onChange={(e) => setStockQuantity(e.target.value)}\r\n              style={{ color: theme.background, background: theme.foreground }}\r\n            />\r\n            <div>Put item on sale:</div>\r\n            <input\r\n              id=\"setSale\"\r\n              type=\"checkbox\"\r\n              value={onSale}\r\n              onChange={(e) => setSale(!onSale)}\r\n              style={{ color: theme.background, background: theme.foreground }}\r\n            />\r\n            {onSale && (\r\n              <div>\r\n                <div>Percentage price reduction: </div>\r\n                <input\r\n                  id=\"reductionInput\"\r\n                  value={saleReductionPercent}\r\n                  onChange={(e) => {\r\n                    setReduction(e.target.value);\r\n                  }}\r\n                  style={{\r\n                    color: theme.background,\r\n                    background: theme.foreground,\r\n                  }}\r\n                ></input>\r\n                <div>{saleReductionPercent}</div>\r\n              </div>\r\n            )}\r\n            {quantityInStock.length === 0 && notAllFieldsFilled && (\r\n              <label for=\"quantityInStock\">\r\n                How many of product are in stock?\r\n              </label>\r\n            )}\r\n\r\n            <button\r\n              id=\"addNewProductButton\"\r\n              style={{ background: theme.background, color: theme.foreground }}\r\n              onClick={(e) =>\r\n                editProductFn(\r\n                  productName,\r\n                  productDescription,\r\n                  productPrice,\r\n                  selectedCategory,\r\n                  productURL,\r\n                  quantityInStock,\r\n                  onSale,\r\n                  saleReductionPercent,\r\n                  match.params._id\r\n                )\r\n              }\r\n            >\r\n              Update product details\r\n            </button>\r\n\r\n            {notAllFieldsFilled && (\r\n              <label for=\"addNewProductButton\" style={{ display: \"block\" }}>\r\n                Complete all fields before uploading product update.\r\n              </label>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n};\r\nexport default ProductInfo;\r\n\r\n// {sale.isSale && onSale && (\r\n//   <div>\r\n//     <img src={saleIcon} alt=\"on sale\" />\r\n//   </div>\r\n// )}\r\n\r\n/*\r\n<div style={{ color: \"red\" }}>\r\n                Product on sale! Original price: $ {productPrice} Reduced to ${\" \"}\r\n                {\r\n                  +(\r\n                    productPrice *\r\n                    ((100 - saleReductionPercent) / 100).toFixed(2)\r\n                  )\r\n                }\r\n              </div>\r\n              */\r\n","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\pages\\Admin\\Admin.js",["139","140","141","142","143","144","145","146","147","148"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport \"./Admin.css\";\r\n\r\n//components of content:\r\nimport Header from \"../../components/Header/Header\";\r\nimport Products from \"../../components/Products/Products\";\r\n//import SearchKeyword from \"../SearchKeyword/SearchKeyword\";\r\nimport CategorySelectAdmin from \"../../components/CategorySelectAdmin/CategorySelectAdmin\";\r\nimport ThemeContext from \"../../contexts/ThemeContexts\";\r\nimport SaleContext, { sales } from \"../../contexts/SaleContexts\";\r\n\r\n/*****\r\n * NEED TO ADD NEW FIELDS TO FORM\r\n * *******\r\n */\r\n\r\nconst Admin = () => {\r\n  const [color] = useState(\"red\");\r\n  const [secondsLeft, setSecondsLeft] = useState(65);\r\n  const [salesProductsIds] = useState([1, 3, 5, 6]);\r\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\r\n  const [products, setProducts] = useState([]);\r\n  const [onSale, setSale] = useState(false);\r\n  const [saleReductionPercent, setReduction] = useState(10);\r\n  const [productName, setName] = useState(\"\");\r\n  const [productDescription, setDescription] = useState(\"\");\r\n  const [productURL, setURL] = useState(\"\");\r\n  const [productPrice, setPrice] = useState(\"\");\r\n  const [quantityInStock, setStockQuantity] = useState(\"\");\r\n  const [notAllFieldsFilled, setFieldsFilled] = useState(false);\r\n\r\n  const { theme } = useContext(ThemeContext);\r\n  const { sale } = useContext(SaleContext);\r\n\r\n  console.log(\"theme\", theme, \"on sale?\", onSale);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/api/products\")\r\n      .then((result) => result.json())\r\n      .then((data) => {\r\n        setProducts(data);\r\n      });\r\n    console.log(\"fetched \");\r\n  }, []);\r\n\r\n  const addButtonLabelStyle = {\r\n    display: \"block\",\r\n  };\r\n\r\n  const checkFieldsFilled = (\r\n    title,\r\n    description,\r\n    price,\r\n    category,\r\n    image,\r\n    quantityInStock,\r\n    onSale\r\n  ) => {\r\n    if (\r\n      title.length === 0 ||\r\n      description.length === 0 ||\r\n      price.length === 0 ||\r\n      category.length === 0 ||\r\n      image.length === 0 ||\r\n      quantityInStock.length === 0\r\n    ) {\r\n      setFieldsFilled(true);\r\n    } else {\r\n      setFieldsFilled(false);\r\n    }\r\n  };\r\n\r\n  const addProduct = async (\r\n    title,\r\n    description,\r\n    price,\r\n    category,\r\n    image,\r\n    quantityInStock,\r\n    onSale,\r\n    saleReductionPercent\r\n  ) => {\r\n    //alert(\"adding\");\r\n    console.log(\"in add product in client\");\r\n    // check here if all fields have been filled in:\r\n    //alert(\"checking fields\");\r\n    if (\r\n      title.length === 0 ||\r\n      description.length === 0 ||\r\n      price.length === 0 ||\r\n      category.length === 0 ||\r\n      image.length === 0 ||\r\n      quantityInStock.length === 0\r\n    ) {\r\n      //alert(\"not all filled\");\r\n      setFieldsFilled(true);\r\n    } else {\r\n      //alert(\"all filled\");\r\n      setFieldsFilled(false);\r\n      // upload new product to server\r\n      const res = await fetch(\"/api/products\", {\r\n        method: \"POST\", // or 'PUT'\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          title: title,\r\n          description,\r\n          price,\r\n          category,\r\n          image,\r\n          quantityInStock,\r\n          onSale,\r\n          saleReductionPercent,\r\n        }),\r\n      });\r\n      //alert(\"res is \", res);\r\n      const product = await res.json();\r\n      //alert(\"adding product \", product);\r\n      console.log(\"adding product \", product);\r\n\r\n      setProducts([products, ...products]);\r\n\r\n      // clear Add Product form\r\n      setName(\"\");\r\n      setSelectedCategory(\"\");\r\n      setDescription(\"\");\r\n      setURL(\"\");\r\n      setPrice(\"\");\r\n      setStockQuantity(\"\");\r\n      setSale(false);\r\n      setReduction(10);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ background: theme.background }}>\r\n      <div>Input name of product:</div>\r\n      <input\r\n        id=\"productName\"\r\n        value={productName}\r\n        onChange={(e) => setName(e.target.value)}\r\n        //onChange={setName(e.target.value)}\r\n        style={{ color: theme.background, background: theme.foreground }}\r\n      />\r\n      {productName.length === 0 && notAllFieldsFilled && (\r\n        <label for=\"productName\">Enter name of product</label>\r\n      )}\r\n      <div>Input description of product:</div>\r\n      <input\r\n        id=\"productDescription\"\r\n        value={productDescription}\r\n        onChange={(e) => setDescription(e.target.value)}\r\n        style={{ color: theme.background, background: theme.foreground }}\r\n      />\r\n      {productDescription.length === 0 && notAllFieldsFilled && (\r\n        <label for=\"productDescription\">Enter description of product</label>\r\n      )}\r\n      <div>Input image URL of product:</div>\r\n      <input\r\n        id=\"productURL\"\r\n        value={productURL}\r\n        onChange={(e) => setURL(e.target.value)}\r\n        style={{ color: theme.background, background: theme.foreground }}\r\n      />\r\n      {productURL.length === 0 && notAllFieldsFilled && (\r\n        <label for=\"productURL\">Enter url of picture of product</label>\r\n      )}\r\n      {productURL.length !== 0 && (\r\n        <div>\r\n          <img\r\n            className=\"thumbImg\"\r\n            src={productURL}\r\n            alt={{ productName }}\r\n          ></img>\r\n        </div>\r\n      )}\r\n      <div>Input price of new product:</div>\r\n      <input\r\n        id=\"productPrice\"\r\n        value={productPrice}\r\n        onChange={(e) => setPrice(e.target.value)}\r\n        style={{ color: theme.background, background: theme.foreground }}\r\n      />\r\n      {productPrice.length === 0 && notAllFieldsFilled && (\r\n        <label for=\"productPrice\">Enter price of product</label>\r\n      )}\r\n      {products.length > 0 && (\r\n        <CategorySelectAdmin\r\n          selectedCategory={selectedCategory}\r\n          setSelectedCategory={setSelectedCategory}\r\n          products={products}\r\n        ></CategorySelectAdmin>\r\n      )}\r\n      <div>Number of product in stock:</div>\r\n      <input\r\n        id=\"quantityInStock\"\r\n        value={quantityInStock}\r\n        onChange={(e) => setStockQuantity(e.target.value)}\r\n        style={{ color: theme.background, background: theme.foreground }}\r\n      />\r\n\r\n      {quantityInStock.length === 0 && notAllFieldsFilled && (\r\n        <label for=\"quantityInStock\">How many of product are in stock?</label>\r\n      )}\r\n      <button\r\n        style={{ color: theme.background, background: theme.foreground }}\r\n        onClick={(e) => {\r\n          alert(\"on slae?\", onSale);\r\n          setSale(!onSale);\r\n        }}\r\n      >\r\n        on slae?\r\n      </button>\r\n      <div>Put item on sale:</div>\r\n      <input\r\n        id=\"setSale\"\r\n        type=\"checkbox\"\r\n        value={onSale}\r\n        onChange={(e) => setSale(!onSale)}\r\n        style={{ color: theme.background, background: theme.foreground }}\r\n      />\r\n      {onSale && (\r\n        <div>\r\n          <div>Percentage price reduction: </div>\r\n          <input\r\n            id=\"reductionInput\"\r\n            value={saleReductionPercent}\r\n            onChange={(e) => {\r\n              setReduction(e.target.value);\r\n            }}\r\n            style={{ color: theme.background, background: theme.foreground }}\r\n          ></input>\r\n        </div>\r\n      )}\r\n      <button\r\n        id=\"addNewProductButton\"\r\n        style={{ background: theme.background, color: theme.foreground }}\r\n        onClick={(e) =>\r\n          addProduct(\r\n            productName,\r\n            productDescription,\r\n            productPrice,\r\n            selectedCategory,\r\n            productURL,\r\n            quantityInStock,\r\n            onSale,\r\n            saleReductionPercent\r\n          )\r\n        }\r\n      >\r\n        Add new product\r\n      </button>\r\n      {notAllFieldsFilled && (\r\n        <label for=\"addNewProductButton\" style={{ display: \"block\" }}>\r\n          Complete all fields before uploading new product.\r\n        </label>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Admin;\r\n\r\n/*\r\naddProduct(\r\n            productName,\r\n            productDescription,\r\n            productPrice,\r\n            selectedCategory,\r\n            productURL,\r\n            quantityInStock,\r\n            onSale\r\n          )\r\n          */\r\n","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\ChangeThemeColors\\ChangeThemeColors.js",[],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\pages\\About\\About.js",[],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\DisplayUser\\DisplayUser.js",["149","150","151","152","153"],"import React, { useContext, useState, useEffect } from \"react\";\r\nimport UserContext from \"../../contexts/UserContexts\";\r\nimport ThemeContext from \"../../contexts/ThemeContexts\";\r\nimport ChangeUser from \"../ChangeUser/ChangeUser\";\r\n\r\nconst DisplayUser = () => {\r\n  const { user, toggleUser } = useContext(UserContext);\r\n  const { theme, toggleTheme } = useContext(ThemeContext);\r\n\r\n  return (\r\n    <div style={{ paddingBottom: \"20px\" }}>\r\n      <div>Welcome {user.name}</div>\r\n      <ChangeUser />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayUser;\r\n","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\storagetools\\LocalStorageArrayTools.js",[],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\Products\\Products.js",["154","155","156","157"],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\Header\\Header.js",["158","159","160"],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\CategorySelectAdmin\\CategorySelectAdmin.js",[],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\CartIcon\\CartIcon.js",["161","162","163"],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\ChangeUser\\ChangeUser.js",["164"],"import React, { useContext } from \"react\";\r\nimport UserContext from \"../../contexts/UserContexts\";\r\nimport ThemeContext from \"../../contexts/ThemeContexts\";\r\nimport \"../ChangeThemeColors/ChangeThemeColors.css\";\r\n\r\nconst ChangeUser = () => {\r\n  const { user, toggleUser } = useContext(UserContext);\r\n  const { theme, toggleTheme } = useContext(ThemeContext);\r\n\r\n  return (\r\n    <button className=\"button\"\r\n      style={{\r\n        background: theme.background,\r\n        color: theme.foreground,\r\n      }}\r\n      onClick={toggleUser}\r\n    >\r\n      {user.name === \"Admin\" && <div>Login as Guest</div>}\r\n      {user.name === \"Guest\" && <div>Login as Admin</div>}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ChangeUser;\r\n","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\SearchKeyword\\SearchKeyword.js",[],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\SaleCountdown\\SaleCountdown.js",["165"],"import React, { useEffect, useRef, useContext } from \"react\";\r\nimport \"./SaleCountdown.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport ThemeContext from \"../../contexts/ThemeContexts\";\r\n\r\n/* this component is called by the Header component *\r\n\r\n/* counts down by seconds the time left until the end of the sale,\r\nand sets state of display message depending on whether the sale has finished */\r\n\r\nconst SaleCountdown = (props) => {\r\n  const { secondsLeft, setSecondsLeft, isSale, setSale } = props;\r\n  const { theme } = useContext(ThemeContext);\r\n\r\n  const convertToDHMS = () => {\r\n    let temp = \"\";\r\n    if (secondsLeft) {\r\n      temp = `\r\n      ${Math.floor(secondsLeft / (60 * 60 * 24))}:${Math.floor(\r\n        (secondsLeft / (60 * 60)) % 24\r\n      )}:`;\r\n      temp = `${temp}${Math.floor((secondsLeft / 60) % 60)}:${Math.floor(\r\n        secondsLeft % 60\r\n      )}`;\r\n      return temp;\r\n    }\r\n  };\r\n\r\n  /************************************ */\r\n  /* version using setTimeout.\r\n  /************************************ */\r\n  /*without the use of useRef, we could not use setInterval here, as it causes an infinite loop! \r\n  /* Each time the state of DHMSLeft is updated, useEffect sets a 1 second timeout.\r\n  At the end of the timeout, the state of the DHMSLeft and secondsLeft update, and so the useEffect runs again,\r\n  and sets another 1 second timeout.\r\n  If the secondsLeft reaches zero\r\n \r\n  useEffect(() => {\r\n    const countdown = setTimeout(() => {\r\n      if (secondsLeft) {\r\n        setSecondsLeft(secondsLeft - 1);\r\n      }\r\n    }, 1000);\r\n\r\n    return () => clearTimeout(countdown);\r\n    */\r\n\r\n  /************************************ */\r\n  /* version using setInterval - needs to use useRef.\r\n  /************************************ */\r\n  const intervalRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const countdown = setInterval(() => {\r\n      if (secondsLeft) {\r\n        setSecondsLeft(secondsLeft - 1);\r\n        console.log(\"counting down, secs:\", secondsLeft);\r\n        setSale(\"true\");\r\n      } else {\r\n        setSale(\"false\");\r\n      }\r\n    }, 1000);\r\n\r\n    //use useRef to create a mutable ref object from the setTimeout identifier (\"countdown\").\r\n    // This lets the timeout id be accessible from the whole component.\r\n    // If we stored the id in a state variable, the component would be re-rendered\r\n    // after the state update so a new interval will be created, creating an infinite loop.\r\n    intervalRef.current = countdown;\r\n\r\n    /********************** */\r\n    /* EXPLANATION:          */\r\n    /********************** */\r\n    /* the intervalRef's current value is updated if starting a new countdown, \r\n    but the intervalRef itself stays fixed in the DOM and doesn't re-render when there's a change in \r\n    state of the secondsLeft variable\r\n    This how the infinite loop is prevented.\r\n    */\r\n\r\n    // Clear timeout if the component is unmounted\r\n    return () => clearTimeout(countdown);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [secondsLeft]);\r\n  //The return will runs each time useEffect finishes the timeout except for the first time\r\n  // and clears the timeout if the component is unmounted\r\n\r\n  const saleMessage = () => {\r\n    return secondsLeft\r\n      ? `10% off!! ${convertToDHMS(\r\n          secondsLeft\r\n        )} days left until the end of the Sale`\r\n      : \"Sale over\";\r\n  };\r\n\r\n  return (\r\n    <div style={{ color: theme.foreground, background: theme.background }}>\r\n      <h2 id=\"message\">{saleMessage()} </h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nSaleCountdown.propTypes = {\r\n  secondsLeft: PropTypes.number,\r\n  setSecondsLeft: PropTypes.func,\r\n};\r\n\r\nexport default SaleCountdown;\r\n","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\CategorySelect\\CategorySelect.js",["166","167","168"],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\ProductDisplayClass\\ProductDisplayClass.js",["169","170","171","172","173"],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\SliderFilterPrice\\SliderFilterPrice.js",["174","175","176"],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\ListCategories\\ListCategories.js",[],"C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\CartDisplayContents\\CartDisplayContents.js",["177"],"import React, { useContext } from \"react\";\r\nimport ThemeContext from \"../../contexts/ThemeContexts\";\r\nimport CartItem from \"../CartItem/CartItem\";\r\n\r\n// old version before installing use-persisted-state:\r\n//import \"../storagetools/LocalStorageArrayTools.js\";\r\nimport createPersistedState from \"use-persisted-state\";\r\n\r\nimport \"./CartDisplayContents.css\";\r\n\r\nconst useCartState = createPersistedState(\"cart\");\r\n\r\nconst CartDisplayContents = ({numInCart, setNumInCart}) => {\r\n  const { theme } = useContext(ThemeContext);\r\n  //const cartItemsArray = JSON.parse(localStorage.getItem(\"cartArray\"));\r\n  const [cart, setCart] = useCartState({});\r\n\r\n  return (\r\n    <div>\r\n      {cart.length > 0 && (\r\n        <div\r\n          className=\"shoppingList\"\r\n          style={{\r\n            color: theme.listColor,\r\n          }}\r\n        >\r\n          {cart.map((item, i) => (\r\n            <CartItem item={item} key={i} numInCart={numInCart} setNumInCart={setNumInCart}/>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CartDisplayContents;\r\n\r\n// old version of displaying cart from localStorage,\r\n// before installing use-persisted-state:\r\n/*\r\nconst CartDisplayContents = () => {\r\n  const { theme } = useContext(ThemeContext);\r\n  const cartItemsArray = JSON.parse(localStorage.getItem(\"cartArray\"));\r\n  console.log(cartItemsArray);\r\n  return (\r\n    <div>\r\n      {cartItemsArray != null && cartItemsArray.length > 0 && (\r\n        <div\r\n          className=\"shoppingList\"\r\n          style={{\r\n            background: theme.listBackground,\r\n          }}\r\n        >\r\n          {cartItemsArray.map((item, i) => (\r\n            <CartItem item={item} key={i} />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n    */\r\n","C:\\Users\\haval\\dev\\online-shop\\gocodeshop-server\\client\\src\\components\\CartItem\\CartItem.js",["178","179","180","181","182"],"import React, { useContext, useState, useEffect } from \"react\";\r\nimport ThemeContext from \"../../contexts/ThemeContexts\";\r\nimport \"./CartItem.css\";\r\nimport sale from \"../icons/green-leaves-sale.svg\";\r\nimport deleteIcon from \"../icons/trash.png\";\r\nimport editIcon from \"../icons/editIcon.png\";\r\nimport upArrow from \"../icons/upArrow.png\";\r\nimport downArrow from \"../icons/downArrow.png\";\r\nimport \"../../components/storagetools/LocalStorageArrayTools.js\";\r\n\r\n// custom hook for updating state from local storage\r\nimport createPersistedState from \"use-persisted-state\";\r\nconst useCartState = createPersistedState(\"cart\");\r\n\r\nconst CartItem = ({ item, numInCart, setNumInCart, quantityWarnText = \"\", setQtyWarn }) => {\r\n  const { theme, toggleTheme } = useContext(ThemeContext);\r\n  const [products, setProducts] = useState({});\r\n  const [qtyLabel, setQtyLabel] = useState(\"\");\r\n  const [qty, setQty] = useState(item.quantity);\r\n  const [cart, setCart] = useCartState({});\r\n  //const {currentItems, setCurrentItems} = useState(cart.length > 0 ? cart : []);\r\n\r\n  const isSale = true;\r\n  //console.log(\"cart item: \", item);\r\n  //console.log(`cart item: ${item.title}, ${item.price}`);\r\nconsole.log(\"in cartItem, numincart is: \", numInCart);\r\n  console.log(\"item is \", item);\r\n  useEffect(() => {\r\n    fetch(`/api/products/${item.productid}`)\r\n      .then((response) => response.json())\r\n      .then((data) => setProducts(data));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const removeFromCart = (id) => {\r\n    // currentItems is given an empty array if getItem returns null (i.e. if no items have yet been added to cart):\r\n    // old version accessing localstorage directly\r\n    //let currentItems = JSON.parse(localStorage.getItem(\"cart\") || \"[]\");\r\n\r\n    // new version using custom hook to access localstorage\r\n   let currentItems = cart.length > 0 ? cart : [];\r\n\r\n    // find index of item in cart array\r\n    if(currentItems.length > 0)  {\r\n    const index = currentItems.findIndex(\r\n      (findItem) => findItem.productid === id\r\n    );\r\n\r\n    // then use index to take item out of array\r\n    console.log(\"id of item: \", id);\r\n    //const quantityInCart = currentItems[index].quantity;\r\n    console.log(\"index of item to remove: \", index);\r\n    currentItems = [\r\n      ...currentItems.slice(0, index),\r\n      ...currentItems.slice(index + 1),\r\n    ];\r\n    // setCurrentItems([\r\n    //   ...currentItems.slice(0, index),\r\n    //   ...currentItems.slice(index + 1),\r\n    // ]);\r\n\r\n    // localStorage.pushArrayItem(\r\n    //   \"cartArray\",\r\n    //   `title: ${title}, price: ${price}, image: ${image}`\r\n    // );\r\n\r\n    // old version - accessing localstorage directly:\r\n    // localStorage.setItem(\"cart\", JSON.stringify(currentItems));\r\n    // let origCartQty = JSON.parse(localStorage.getItem(\"cartQty\"));\r\n    // alert(\"orig qty:\", origCartQty);\r\n\r\n    // origCartQty -= quantityInCart;\r\n    // alert(\"orig qty:\", origCartQty);\r\n\r\n    // localStorage.setItem(\"cartQty\", origCartQty);\r\n\r\n    // new version, using custom hook:\r\n    setCart(currentItems);\r\n    setNumInCart(numInCart-1)\r\n    setQty(0);\r\n    if(quantityWarnText!==\"\")setQtyWarn(\"\");\r\n  \r\n  }\r\n  };\r\n\r\n  const editItemCartQty = (id, qty) => {\r\n    // currentItems is given an empty array if getItem returns null (i.e. if no items have yet been added to cart):\r\n    //let currentItems = JSON.parse(localStorage.getItem(\"cartArray\") || \"[]\");\r\n   let currentItems = cart.length > 0 ? cart : [];\r\n    // let tempCartItem={};\r\n    if (currentItems.length > 0){\r\n    // let tempCartItems = currentItems;\r\n    // console.log(\"cartitem curritemsL \", currentItems);\r\n    // find index of item in cart array\r\n    const index = currentItems.findIndex(\r\n      (findItem) => findItem.productid === id\r\n    );\r\n    // const index = tempCartItems.findIndex(\r\n    //   (findItem) => findItem.productid === id\r\n    // );\r\n    //alert(\"currentItems are: \", currentItems);\r\n    if(quantityWarnText!==\"\")setQtyWarn(\"\");\r\n\r\n    console.log(\"item to change: \", index, \"from id \", id);\r\n\r\n    console.log(\"qty prev in cart \", currentItems[index].quantity);\r\n    console.log(\"from API: \", products);\r\n    // then use index to take item out of array\r\n    if (currentItems[index].quantity + qty <= products.quantityInStock) {\r\n      // tempCartItem = currentItems[index];\r\n      // tempCartItem.quantity += qty;\r\n      // setCurrentItems([\r\n      //   ...currentItems.slice(0, index),\r\n      //   tempCartItem,\r\n      //   ...currentItems.slice(index + 1),\r\n      // ]);\r\n      currentItems[index].quantity += qty;\r\n      console.log(`numInCart: ${numInCart} adding qty: ${qty}, num in stock: ${products.quantityInStock}`);\r\n\r\n      setQtyLabel(\"\");\r\n     setNumInCart(numInCart+qty);\r\n    } else {\r\n      console.log(\"not enough in stock\");\r\n      console.log(`numInCart: ${numInCart} wanting to add qty: ${qty}, num in stock: ${products.quantityInStock}`);\r\n\r\n      setQtyLabel(`There are only ${products.quantityInStock} items in stock`);\r\n    }\r\n    console.log(\r\n      \"num in stock: \",\r\n      products.quantityInStock,\r\n      \" num wanted b4\",\r\n      currentItems[index].quantity,\r\n      \" more: \",\r\n      qty\r\n    );\r\n    console.log(\"qty now in cart \", currentItems[index].quantity);\r\n    // localStorage.pushArrayItem(\r\n    //   \"cartArray\",\r\n    //   `title: ${title}, price: ${price}, image: ${image}`\r\n    // );\r\n\r\n    // old way to update cart - directly via localstorage\r\n\r\n    // localStorage.setItem(\"cartArray\", JSON.stringify(currentItems));\r\n\r\n    // // update as well total number of items in cart\r\n    // let origCartQty = JSON.parse(localStorage.getItem(\"cartQty\"));\r\n    // origCartQty += qty;\r\n    // localStorage.setItem(\"cartQty\", origCartQty);\r\n\r\n    // if reduce quantity to 0, remove item from cart:\r\n    if (currentItems[index].quantity === 0)\r\n      removeFromCart(currentItems[index].productid);\r\n    else {\r\n      // update cart with new quantity of item\r\n      console.log(\"cartitem curritems \", currentItems);\r\n      // new way to update localstorage - via custom hook :\r\n      setCart(currentItems);\r\n      setQty(currentItems[index].quantity);\r\n    }\r\n  }\r\n  };\r\n\r\n  return (\r\n    <div className=\"cartItemDisplay\">\r\n      <div className=\"itemIconImage\">\r\n        {(item.saleReductionPercent>0) && <img className=\"saleIcon\" src={sale} alt=\"sale icon\" />}\r\n        {(item.saleReductionPercent==0) && <div className=\"noSaleBox\"></div>}\r\n        <img className=\"itemIcon\" src={item.image} alt=\"showing the item\" />\r\n      </div>\r\n      <div className=\"itemNamePrice\">\r\n      <div className=\"itemName\">{item.title}</div>\r\n      {item.saleReductionPercent > 0 && (\r\n        <div style={{ color: \"red\" }} className=\"itemPrice\">\r\n          sale price: ${(item.price * (100 - item.saleReductionPercent)) / 100}\r\n        </div>\r\n      )}\r\n      {item.saleReductionPercent === 0 && (\r\n        <div className=\"itemPrice\">price: ${item.price} </div>\r\n      )}\r\n      </div>\r\n      <div className=\"itemQtyBoxContainer\">\r\n        <div className=\"itemQtyBox\">\r\n          <div className=\"itemPrice\">quantity: </div>\r\n\r\n          <div className=\"itemQtyNumArrows\">\r\n            <img\r\n              className=\"upDownIcon\"\r\n              src={downArrow}\r\n              alt=\"click here to reduce item quantity\"\r\n              onClick={(e) => editItemCartQty(item.productid, -1)}\r\n            />\r\n            <div id=\"itemQuantity\" className=\"itemQuantity\">\r\n              {qty}\r\n            </div>\r\n            <img\r\n              className=\"upDownIcon\"\r\n              src={upArrow}\r\n              alt=\"click here to increase item quantity\"\r\n              onClick={(e) => editItemCartQty(item.productid, 1)}\r\n            />\r\n            <img\r\n            className=\"deleteIcon\"\r\n            src={deleteIcon}\r\n            alt=\"click here to remove item from cart\"\r\n            onClick={(e) => removeFromCart(item.productid)}\r\n          />\r\n          </div>\r\n\r\n          \r\n        </div>\r\n\r\n        <label htmlFor=\"itemQuantity\">{qtyLabel}</label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CartItem;\r\n",["183","184"],{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","severity":1,"message":"190","line":39,"column":10,"nodeType":"191","messageId":"192","endLine":39,"endColumn":19},{"ruleId":"189","severity":1,"message":"193","line":39,"column":21,"nodeType":"191","messageId":"192","endLine":39,"endColumn":33},{"ruleId":"189","severity":1,"message":"194","line":2,"column":10,"nodeType":"191","messageId":"192","endLine":2,"endColumn":20},{"ruleId":"189","severity":1,"message":"195","line":2,"column":8,"nodeType":"191","messageId":"192","endLine":2,"endColumn":19},{"ruleId":"189","severity":1,"message":"196","line":4,"column":8,"nodeType":"191","messageId":"192","endLine":4,"endColumn":19},{"ruleId":"189","severity":1,"message":"197","line":4,"column":23,"nodeType":"191","messageId":"192","endLine":4,"endColumn":28},{"ruleId":"189","severity":1,"message":"198","line":17,"column":10,"nodeType":"191","messageId":"192","endLine":17,"endColumn":21},{"ruleId":"189","severity":1,"message":"199","line":18,"column":11,"nodeType":"191","messageId":"192","endLine":18,"endColumn":15},{"ruleId":"189","severity":1,"message":"200","line":18,"column":17,"nodeType":"191","messageId":"192","endLine":18,"endColumn":27},{"ruleId":"201","severity":1,"message":"202","line":48,"column":4,"nodeType":"203","endLine":48,"endColumn":19},{"ruleId":"201","severity":1,"message":"204","line":48,"column":4,"nodeType":"203","endLine":48,"endColumn":19,"suggestions":"205"},{"ruleId":"189","severity":1,"message":"206","line":6,"column":24,"nodeType":"191","messageId":"192","endLine":6,"endColumn":30},{"ruleId":"189","severity":1,"message":"197","line":7,"column":23,"nodeType":"191","messageId":"192","endLine":7,"endColumn":28},{"ruleId":"189","severity":1,"message":"200","line":38,"column":17,"nodeType":"191","messageId":"192","endLine":38,"endColumn":27},{"ruleId":"189","severity":1,"message":"207","line":40,"column":11,"nodeType":"191","messageId":"192","endLine":40,"endColumn":15},{"ruleId":"189","severity":1,"message":"208","line":43,"column":30,"nodeType":"191","messageId":"192","endLine":43,"endColumn":45},{"ruleId":"189","severity":1,"message":"209","line":49,"column":10,"nodeType":"191","messageId":"192","endLine":49,"endColumn":19},{"ruleId":"189","severity":1,"message":"210","line":52,"column":22,"nodeType":"191","messageId":"192","endLine":52,"endColumn":28},{"ruleId":"189","severity":1,"message":"211","line":87,"column":13,"nodeType":"191","messageId":"192","endLine":87,"endColumn":19},{"ruleId":"212","severity":1,"message":"213","line":248,"column":20,"nodeType":"214","messageId":"215","endLine":253,"endColumn":12},{"ruleId":"189","severity":1,"message":"216","line":5,"column":8,"nodeType":"191","messageId":"192","endLine":5,"endColumn":14},{"ruleId":"189","severity":1,"message":"217","line":6,"column":8,"nodeType":"191","messageId":"192","endLine":6,"endColumn":16},{"ruleId":"189","severity":1,"message":"197","line":10,"column":23,"nodeType":"191","messageId":"192","endLine":10,"endColumn":28},{"ruleId":"189","severity":1,"message":"218","line":18,"column":10,"nodeType":"191","messageId":"192","endLine":18,"endColumn":15},{"ruleId":"189","severity":1,"message":"219","line":19,"column":10,"nodeType":"191","messageId":"192","endLine":19,"endColumn":21},{"ruleId":"189","severity":1,"message":"220","line":19,"column":23,"nodeType":"191","messageId":"192","endLine":19,"endColumn":37},{"ruleId":"189","severity":1,"message":"221","line":20,"column":10,"nodeType":"191","messageId":"192","endLine":20,"endColumn":26},{"ruleId":"189","severity":1,"message":"207","line":33,"column":11,"nodeType":"191","messageId":"192","endLine":33,"endColumn":15},{"ruleId":"189","severity":1,"message":"222","line":46,"column":9,"nodeType":"191","messageId":"192","endLine":46,"endColumn":28},{"ruleId":"189","severity":1,"message":"223","line":50,"column":9,"nodeType":"191","messageId":"192","endLine":50,"endColumn":26},{"ruleId":"189","severity":1,"message":"224","line":1,"column":29,"nodeType":"191","messageId":"192","endLine":1,"endColumn":37},{"ruleId":"189","severity":1,"message":"225","line":1,"column":39,"nodeType":"191","messageId":"192","endLine":1,"endColumn":48},{"ruleId":"189","severity":1,"message":"200","line":7,"column":17,"nodeType":"191","messageId":"192","endLine":7,"endColumn":27},{"ruleId":"189","severity":1,"message":"226","line":8,"column":11,"nodeType":"191","messageId":"192","endLine":8,"endColumn":16},{"ruleId":"189","severity":1,"message":"227","line":8,"column":18,"nodeType":"191","messageId":"192","endLine":8,"endColumn":29},{"ruleId":"189","severity":1,"message":"200","line":10,"column":17,"nodeType":"191","messageId":"192","endLine":10,"endColumn":27},{"ruleId":"228","severity":1,"message":"229","line":18,"column":36,"nodeType":"230","messageId":"231","endLine":18,"endColumn":38},{"ruleId":"228","severity":1,"message":"229","line":19,"column":33,"nodeType":"230","messageId":"231","endLine":19,"endColumn":35},{"ruleId":"201","severity":1,"message":"232","line":22,"column":6,"nodeType":"233","endLine":22,"endColumn":51,"suggestions":"234"},{"ruleId":"189","severity":1,"message":"235","line":23,"column":5,"nodeType":"191","messageId":"192","endLine":23,"endColumn":16},{"ruleId":"189","severity":1,"message":"200","line":30,"column":17,"nodeType":"191","messageId":"192","endLine":30,"endColumn":27},{"ruleId":"189","severity":1,"message":"236","line":32,"column":16,"nodeType":"191","messageId":"192","endLine":32,"endColumn":23},{"ruleId":"189","severity":1,"message":"225","line":1,"column":27,"nodeType":"191","messageId":"192","endLine":1,"endColumn":36},{"ruleId":"189","severity":1,"message":"237","line":1,"column":38,"nodeType":"191","messageId":"192","endLine":1,"endColumn":48},{"ruleId":"189","severity":1,"message":"236","line":16,"column":14,"nodeType":"191","messageId":"192","endLine":16,"endColumn":21},{"ruleId":"189","severity":1,"message":"227","line":8,"column":18,"nodeType":"191","messageId":"192","endLine":8,"endColumn":29},{"ruleId":"189","severity":1,"message":"238","line":12,"column":40,"nodeType":"191","messageId":"192","endLine":12,"endColumn":46},{"ruleId":"189","severity":1,"message":"225","line":1,"column":17,"nodeType":"191","messageId":"192","endLine":1,"endColumn":26},{"ruleId":"189","severity":1,"message":"224","line":1,"column":40,"nodeType":"191","messageId":"192","endLine":1,"endColumn":48},{"ruleId":"189","severity":1,"message":"239","line":2,"column":8,"nodeType":"191","messageId":"192","endLine":2,"endColumn":17},{"ruleId":"189","severity":1,"message":"197","line":5,"column":23,"nodeType":"191","messageId":"192","endLine":5,"endColumn":28},{"ruleId":"189","severity":1,"message":"206","line":7,"column":24,"nodeType":"191","messageId":"192","endLine":7,"endColumn":30},{"ruleId":"189","severity":1,"message":"240","line":22,"column":5,"nodeType":"191","messageId":"192","endLine":22,"endColumn":14},{"ruleId":"189","severity":1,"message":"238","line":26,"column":5,"nodeType":"191","messageId":"192","endLine":26,"endColumn":11},{"ruleId":"189","severity":1,"message":"207","line":32,"column":11,"nodeType":"191","messageId":"192","endLine":32,"endColumn":15},{"ruleId":"189","severity":1,"message":"224","line":1,"column":40,"nodeType":"191","messageId":"192","endLine":1,"endColumn":48},{"ruleId":"189","severity":1,"message":"241","line":6,"column":24,"nodeType":"191","messageId":"192","endLine":6,"endColumn":36},{"ruleId":"189","severity":1,"message":"242","line":14,"column":9,"nodeType":"191","messageId":"192","endLine":14,"endColumn":18},{"ruleId":"189","severity":1,"message":"236","line":16,"column":16,"nodeType":"191","messageId":"192","endLine":16,"endColumn":23},{"ruleId":"189","severity":1,"message":"243","line":6,"column":8,"nodeType":"191","messageId":"192","endLine":6,"endColumn":16},{"ruleId":"189","severity":1,"message":"226","line":16,"column":11,"nodeType":"191","messageId":"192","endLine":16,"endColumn":16},{"ruleId":"189","severity":1,"message":"227","line":16,"column":18,"nodeType":"191","messageId":"192","endLine":16,"endColumn":29},{"ruleId":"189","severity":1,"message":"238","line":23,"column":9,"nodeType":"191","messageId":"192","endLine":23,"endColumn":15},{"ruleId":"228","severity":1,"message":"244","line":168,"column":36,"nodeType":"230","messageId":"231","endLine":168,"endColumn":38},{"ruleId":"185","replacedBy":"245"},{"ruleId":"187","replacedBy":"246"},"no-native-reassign",["247"],"no-negated-in-lhs",["248"],"no-unused-vars","'numInCart' is assigned a value but never used.","Identifier","unusedVar","'setNumInCart' is assigned a value but never used.","'withRouter' is defined but never used.","'DisplayUser' is defined but never used.","'SaleContext' is defined but never used.","'sales' is defined but never used.","'numProducts' is assigned a value but never used.","'user' is assigned a value but never used.","'toggleUser' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","MemberExpression","React Hook useEffect has a missing dependency: 'products.length'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setNumProds' needs the current value of 'products.length'.",["249"],"'themes' is defined but never used.","'sale' is assigned a value but never used.","'setFieldsFilled' is assigned a value but never used.","'productId' is assigned a value but never used.","'setURL' is assigned a value but never used.","'result' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'Header' is defined but never used.","'Products' is defined but never used.","'color' is assigned a value but never used.","'secondsLeft' is assigned a value but never used.","'setSecondsLeft' is assigned a value but never used.","'salesProductsIds' is assigned a value but never used.","'addButtonLabelStyle' is assigned a value but never used.","'checkFieldsFilled' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'theme' is assigned a value but never used.","'toggleTheme' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'products'. Either include it or remove the dependency array.","ArrayExpression",["250"],"'setProducts' is assigned a value but never used.","'setCart' is assigned a value but never used.","'useReducer' is defined but never used.","'isSale' is assigned a value but never used.","'PropTypes' is defined but never used.","'productid' is assigned a value but never used.","'currentTheme' is defined but never used.","'formatter' is assigned a value but never used.","'editIcon' is defined but never used.","Expected '===' and instead saw '=='.",["247"],["248"],"no-global-assign","no-unsafe-negation",{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},"Update the dependencies array to be: [products.length]",{"range":"255","text":"256"},"Update the dependencies array to be: [priceRange, selectedCategory, searchKeyword, products]",{"range":"257","text":"258"},[1745,1760],"[products.length]",[1108,1153],"[priceRange, selectedCategory, searchKeyword, products]"]